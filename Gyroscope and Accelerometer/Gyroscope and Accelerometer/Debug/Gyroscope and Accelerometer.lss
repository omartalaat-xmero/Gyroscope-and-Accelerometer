
Gyroscope and Accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001250  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  000012f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002218  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e20  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001319  00000000  00000000  000045f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000063c  00000000  00000000  00005910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf4  00000000  00000000  00005f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d28  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__vector_7>
      20:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_8>
      24:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_9>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	std	Y+51, r6	; 0x33
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 00       	.word	0x003f	; ????

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	10 e0       	ldi	r17, 0x00	; 0
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e0 e5       	ldi	r30, 0x50	; 80
      96:	f2 e1       	ldi	r31, 0x12	; 18
      98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0
      9e:	a4 37       	cpi	r26, 0x74	; 116
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
      a4:	20 e0       	ldi	r18, 0x00	; 0
      a6:	a4 e7       	ldi	r26, 0x74	; 116
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a0 38       	cpi	r26, 0x80	; 128
      b0:	b2 07       	cpc	r27, r18
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
      b8:	0c 94 26 09 	jmp	0x124c	; 0x124c <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <DIO_read>:
	}
	
}

void DIO_read(uint8_t pinnumber, uint8_t portnumber,  uint8_t *value){
	switch(portnumber) {
      c0:	62 34       	cpi	r22, 0x42	; 66
      c2:	c1 f0       	breq	.+48     	; 0xf4 <DIO_read+0x34>
      c4:	18 f4       	brcc	.+6      	; 0xcc <DIO_read+0xc>
      c6:	61 34       	cpi	r22, 0x41	; 65
      c8:	31 f0       	breq	.+12     	; 0xd6 <DIO_read+0x16>
      ca:	08 95       	ret
      cc:	63 34       	cpi	r22, 0x43	; 67
      ce:	09 f1       	breq	.+66     	; 0x112 <DIO_read+0x52>
      d0:	64 34       	cpi	r22, 0x44	; 68
      d2:	71 f1       	breq	.+92     	; 0x130 <DIO_read+0x70>
      d4:	08 95       	ret
		case PORT_A:
		*value = (PINA & (1 << pinnumber)) ? HIGH : LOW;
      d6:	29 b3       	in	r18, 0x19	; 25
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	b9 01       	movw	r22, r18
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_read+0x22>
      de:	75 95       	asr	r23
      e0:	67 95       	ror	r22
      e2:	8a 95       	dec	r24
      e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_read+0x1e>
      e6:	cb 01       	movw	r24, r22
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	80 ff       	sbrs	r24, 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	fa 01       	movw	r30, r20
      f0:	90 83       	st	Z, r25
		break;
      f2:	08 95       	ret
		case PORT_B:
		*value = (PINB & (1 << pinnumber)) ? HIGH : LOW;
      f4:	26 b3       	in	r18, 0x16	; 22
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	b9 01       	movw	r22, r18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_read+0x40>
      fc:	75 95       	asr	r23
      fe:	67 95       	ror	r22
     100:	8a 95       	dec	r24
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_read+0x3c>
     104:	cb 01       	movw	r24, r22
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	80 ff       	sbrs	r24, 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	fa 01       	movw	r30, r20
     10e:	90 83       	st	Z, r25
		break;
     110:	08 95       	ret
		case PORT_C:
		*value = (PINC & (1 << pinnumber)) ? HIGH : LOW;
     112:	23 b3       	in	r18, 0x13	; 19
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	b9 01       	movw	r22, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_read+0x5e>
     11a:	75 95       	asr	r23
     11c:	67 95       	ror	r22
     11e:	8a 95       	dec	r24
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_read+0x5a>
     122:	cb 01       	movw	r24, r22
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	80 ff       	sbrs	r24, 0
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	fa 01       	movw	r30, r20
     12c:	90 83       	st	Z, r25
		break;
     12e:	08 95       	ret
		case PORT_D:
		*value = (PIND & (1 << pinnumber)) ? HIGH : LOW;
     130:	20 b3       	in	r18, 0x10	; 16
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	b9 01       	movw	r22, r18
     136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_read+0x7c>
     138:	75 95       	asr	r23
     13a:	67 95       	ror	r22
     13c:	8a 95       	dec	r24
     13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_read+0x78>
     140:	cb 01       	movw	r24, r22
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	80 ff       	sbrs	r24, 0
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fa 01       	movw	r30, r20
     14a:	90 83       	st	Z, r25
     14c:	08 95       	ret

0000014e <FT232_init>:
#include "../UART/UART.h"

static char tx_buffer[128];

void FT232_init(void) {
	UART_init();
     14e:	0e 94 96 05 	call	0xb2c	; 0xb2c <UART_init>
     152:	08 95       	ret

00000154 <I2C_init>:
#include "../I2C/I2C.h"

void I2C_init(void){ //This function prepares your microcontroller to act as an I2C Master
	TWSR = 0x00; //Set prescaler to 1 for I2C clock
     154:	11 b8       	out	0x01, r1	; 1
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2; //Set I2C bit rate
     156:	80 e2       	ldi	r24, 0x20	; 32
     158:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN); //Enable the I2C peripheral
     15a:	84 e0       	ldi	r24, 0x04	; 4
     15c:	86 bf       	out	0x36, r24	; 54
     15e:	08 95       	ret

00000160 <I2C_start>:
			Enables the I2C hardware
			TWINT (TWI Interrupt Flag
			Writing a 1 clears the flag and starts the operation (START condition in this case
		This combination initiates a START condition on the I2C bus.
	*/
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     160:	84 ea       	ldi	r24, 0xA4	; 164
     162:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT))); //Waits until the START condition has been sent
     164:	06 b6       	in	r0, 0x36	; 54
     166:	07 fe       	sbrs	r0, 7
     168:	fd cf       	rjmp	.-6      	; 0x164 <I2C_start+0x4>
}
     16a:	08 95       	ret

0000016c <I2C_write>:

void I2C_write(uint8_t data){ //It is used to send a byte (either a slave address or data) via I2C
	TWDR = data;
     16c:	83 b9       	out	0x03, r24	; 3
		Starts the transmission:
			TWEN: Enables the I2C hardware.
			TWINT: Clears the interrupt flag to begin the transmission.
		Once this line is executed, the hardware begins sending the byte in TWDR over the I2C bus.
	*/
	TWCR = (1 << TWEN) | (1 << TWINT);
     16e:	84 e8       	ldi	r24, 0x84	; 132
     170:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT))); //Waits for the transmission to complete.
     172:	06 b6       	in	r0, 0x36	; 54
     174:	07 fe       	sbrs	r0, 7
     176:	fd cf       	rjmp	.-6      	; 0x172 <I2C_write+0x6>
	//The TWINT flag is set by the hardware when the byte has been fully transmitted and the slave has acknowledged (or not).
}
     178:	08 95       	ret

0000017a <I2C_read_ack>:

uint8_t I2C_read_ack(void){ //It is used when you want to read a byte from the slave and tell it that you want more data by sending an ACK.
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
     17a:	84 ec       	ldi	r24, 0xC4	; 196
     17c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
     17e:	06 b6       	in	r0, 0x36	; 54
     180:	07 fe       	sbrs	r0, 7
     182:	fd cf       	rjmp	.-6      	; 0x17e <I2C_read_ack+0x4>
	return TWDR;
     184:	83 b1       	in	r24, 0x03	; 3
}
     186:	08 95       	ret

00000188 <I2C_read_nack>:

uint8_t I2C_read_nack(void){ //It's used to read the final byte in a multi-byte read sequence.
	TWCR = (1 << TWEN) | (1 << TWINT);
     188:	84 e8       	ldi	r24, 0x84	; 132
     18a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <I2C_read_nack+0x4>
	return TWDR;
     192:	83 b1       	in	r24, 0x03	; 3
	/*
		Notice: TWEA is not set, which means:
			After receiving this byte, no ACK is sent.
			This is interpreted by the slave as: "Stop sending, this was the last byte."
	*/
}
     194:	08 95       	ret

00000196 <I2C_stop>:

void I2C_stop(void){ //It is called at the end of an I2C communication session.
	TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
     196:	84 e9       	ldi	r24, 0x94	; 148
     198:	86 bf       	out	0x36, r24	; 54
     19a:	08 95       	ret

0000019c <lcd_cmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19c:	98 b3       	in	r25, 0x18	; 24
     19e:	9d 7f       	andi	r25, 0xFD	; 253
     1a0:	98 bb       	out	0x18, r25	; 24
     1a2:	8b bb       	out	0x1b, r24	; 27
     1a4:	88 b3       	in	r24, 0x18	; 24
     1a6:	81 60       	ori	r24, 0x01	; 1
     1a8:	88 bb       	out	0x18, r24	; 24
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_cmd+0x10>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_cmd+0x16>
     1b2:	88 b3       	in	r24, 0x18	; 24
     1b4:	8e 7f       	andi	r24, 0xFE	; 254
     1b6:	88 bb       	out	0x18, r24	; 24
     1b8:	8f e9       	ldi	r24, 0x9F	; 159
     1ba:	9f e0       	ldi	r25, 0x0F	; 15
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_cmd+0x20>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_cmd+0x26>
     1c2:	00 00       	nop
     1c4:	08 95       	ret

000001c6 <lcd_data>:
     1c6:	98 b3       	in	r25, 0x18	; 24
     1c8:	92 60       	ori	r25, 0x02	; 2
     1ca:	98 bb       	out	0x18, r25	; 24
     1cc:	8b bb       	out	0x1b, r24	; 27
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	8a 95       	dec	r24
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_data+0xa>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_data+0x10>
     1d6:	88 b3       	in	r24, 0x18	; 24
     1d8:	81 60       	ori	r24, 0x01	; 1
     1da:	88 bb       	out	0x18, r24	; 24
     1dc:	88 b3       	in	r24, 0x18	; 24
     1de:	8e 7f       	andi	r24, 0xFE	; 254
     1e0:	88 bb       	out	0x18, r24	; 24
     1e2:	8f e9       	ldi	r24, 0x9F	; 159
     1e4:	9f e0       	ldi	r25, 0x0F	; 15
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_data+0x20>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_data+0x26>
     1ec:	00 00       	nop
     1ee:	08 95       	ret

000001f0 <lcd_print>:
	PORTB |= (1 << 0);   // E = 1
	PORTB &= ~(1 << 0);  // E = 0
	_delay_us(40);
}

void lcd_print(char *p){
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	ec 01       	movw	r28, r24
	while(*p){
     1f6:	03 c0       	rjmp	.+6      	; 0x1fe <lcd_print+0xe>
		lcd_data(*p++);
     1f8:	21 96       	adiw	r28, 0x01	; 1
     1fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_data>
	PORTB &= ~(1 << 0);  // E = 0
	_delay_us(40);
}

void lcd_print(char *p){
	while(*p){
     1fe:	88 81       	ld	r24, Y
     200:	81 11       	cpse	r24, r1
     202:	fa cf       	rjmp	.-12     	; 0x1f8 <lcd_print+0x8>
		lcd_data(*p++);
	}
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <lcd_init>:
#include "LCD.h"

void lcd_init(){
	DDRA = 0xFF;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << 1);
     20e:	87 b3       	in	r24, 0x17	; 23
     210:	82 60       	ori	r24, 0x02	; 2
     212:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << 0);
     214:	87 b3       	in	r24, 0x17	; 23
     216:	81 60       	ori	r24, 0x01	; 1
     218:	87 bb       	out	0x17, r24	; 23
	lcd_cmd(0x38);
     21a:	88 e3       	ldi	r24, 0x38	; 56
     21c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_cmd(0x0F);
     220:	8f e0       	ldi	r24, 0x0F	; 15
     222:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_cmd(0x01);
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	8f e9       	ldi	r24, 0x9F	; 159
     22e:	9f e0       	ldi	r25, 0x0F	; 15
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x26>
     234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x2c>
     236:	00 00       	nop
	_delay_ms(2);
	lcd_cmd(0x83);
     238:	83 e8       	ldi	r24, 0x83	; 131
     23a:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_print("SPM");
     23e:	80 e6       	ldi	r24, 0x60	; 96
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_print>
	lcd_cmd(0x8B);
     246:	8b e8       	ldi	r24, 0x8B	; 139
     248:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_print("Count");
     24c:	84 e6       	ldi	r24, 0x64	; 100
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_print>
	lcd_cmd(0xCC);
     254:	8c ec       	ldi	r24, 0xCC	; 204
     256:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_print("Time");
     25a:	8a e6       	ldi	r24, 0x6A	; 106
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_print>
     262:	08 95       	ret

00000264 <lcd_print_float_line1>:
	while(*p){
		lcd_data(*p++);
	}
}

void lcd_print_float_line1(float number) {
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	2a 97       	sbiw	r28, 0x0a	; 10
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	6b 01       	movw	r12, r22
     28a:	7c 01       	movw	r14, r24
	char buffer[10];
	int int_part = (int)number;
     28c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fixsfsi>
     290:	4b 01       	movw	r8, r22
     292:	5c 01       	movw	r10, r24
	lcd_cmd(0x0C);
     294:	8c e0       	ldi	r24, 0x0C	; 12
     296:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	lcd_cmd(0x80);
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_cmd>
	if (number < 0) {
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	a9 01       	movw	r20, r18
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__cmpsf2>
     2ae:	88 23       	and	r24, r24
     2b0:	1c f4       	brge	.+6      	; 0x2b8 <lcd_print_float_line1+0x54>
		lcd_data('-');
     2b2:	8d e2       	ldi	r24, 0x2D	; 45
     2b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_data>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     2b8:	4a e0       	ldi	r20, 0x0A	; 10
     2ba:	be 01       	movw	r22, r28
     2bc:	6f 5f       	subi	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	c4 01       	movw	r24, r8
     2c2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__itoa_ncheck>
		number = -number;
	}
	itoa(int_part, buffer, 10);
	lcd_print(buffer);
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_print>
}
     2ce:	2a 96       	adiw	r28, 0x0a	; 10
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	bf 90       	pop	r11
     2e8:	af 90       	pop	r10
     2ea:	9f 90       	pop	r9
     2ec:	8f 90       	pop	r8
     2ee:	08 95       	ret

000002f0 <main>:
volatile uint16_t t_milliseconds = 0;
volatile uint8_t t_seconds = 0;
volatile uint8_t t_minutes = 0;
volatile uint8_t t_hours = 0;

int main(void){
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	af 97       	sbiw	r28, 0x2f	; 47
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	0f be       	out	0x3f, r0	; 63
     302:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t button_prev_status = 0, button_curr_status = 0;
     304:	19 82       	std	Y+1, r1	; 0x01
	uint16_t prev_milliseconds = 0, prev_microseconds = 0;
	uint8_t last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0;
	uint16_t last_press_milliseconds = 0, last_press_microseconds = 0;
	uint8_t prev_press_h = 0, prev_press_m = 0, prev_press_s = 0;
	uint16_t prev_press_ms = 0, prev_press_us = 0;
	uint8_t curr_press_h = 0, curr_press_m = 0, curr_press_s = 0;
     306:	1a 82       	std	Y+2, r1	; 0x02
     308:	1b 82       	std	Y+3, r1	; 0x03
     30a:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t curr_press_ms = 0, curr_press_us = 0;
     30c:	1e 82       	std	Y+6, r1	; 0x06
     30e:	1d 82       	std	Y+5, r1	; 0x05
     310:	18 86       	std	Y+8, r1	; 0x08
     312:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t first_press = 1;
	uint16_t count=0;
	int16_t ax = 0, ay = 0, az = 0;
     314:	1a 86       	std	Y+10, r1	; 0x0a
     316:	19 86       	std	Y+9, r1	; 0x09
     318:	1c 86       	std	Y+12, r1	; 0x0c
     31a:	1b 86       	std	Y+11, r1	; 0x0b
     31c:	1e 86       	std	Y+14, r1	; 0x0e
     31e:	1d 86       	std	Y+13, r1	; 0x0d
	int16_t gx = 0, gy = 0, gz = 0;
     320:	18 8a       	std	Y+16, r1	; 0x10
     322:	1f 86       	std	Y+15, r1	; 0x0f
     324:	1a 8a       	std	Y+18, r1	; 0x12
     326:	19 8a       	std	Y+17, r1	; 0x11
     328:	1c 8a       	std	Y+20, r1	; 0x14
     32a:	1b 8a       	std	Y+19, r1	; 0x13
	float pitch = 0, roll = 0;
     32c:	1d 8a       	std	Y+21, r1	; 0x15
     32e:	1e 8a       	std	Y+22, r1	; 0x16
     330:	1f 8a       	std	Y+23, r1	; 0x17
     332:	18 8e       	std	Y+24, r1	; 0x18
     334:	19 8e       	std	Y+25, r1	; 0x19
     336:	1a 8e       	std	Y+26, r1	; 0x1a
     338:	1b 8e       	std	Y+27, r1	; 0x1b
     33a:	1c 8e       	std	Y+28, r1	; 0x1c
	float SPM = 0;

	Stopwatch_Init();
     33c:	0e 94 a7 04 	call	0x94e	; 0x94e <Stopwatch_Init>
	lcd_init();
     340:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_init>
	FT232_init();
     344:	0e 94 a7 00 	call	0x14e	; 0x14e <FT232_init>
	MPU6050_Init();
     348:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <MPU6050_Init>
	uint8_t first_press = 1;
	uint16_t count=0;
	int16_t ax = 0, ay = 0, az = 0;
	int16_t gx = 0, gy = 0, gz = 0;
	float pitch = 0, roll = 0;
	float SPM = 0;
     34c:	1d a2       	std	Y+37, r1	; 0x25
     34e:	1e a2       	std	Y+38, r1	; 0x26
     350:	1f a2       	std	Y+39, r1	; 0x27
     352:	18 a6       	std	Y+40, r1	; 0x28
	uint8_t prev_press_h = 0, prev_press_m = 0, prev_press_s = 0;
	uint16_t prev_press_ms = 0, prev_press_us = 0;
	uint8_t curr_press_h = 0, curr_press_m = 0, curr_press_s = 0;
	uint16_t curr_press_ms = 0, curr_press_us = 0;
	uint8_t first_press = 1;
	uint16_t count=0;
     354:	81 2c       	mov	r8, r1
     356:	91 2c       	mov	r9, r1
	uint16_t last_press_milliseconds = 0, last_press_microseconds = 0;
	uint8_t prev_press_h = 0, prev_press_m = 0, prev_press_s = 0;
	uint16_t prev_press_ms = 0, prev_press_us = 0;
	uint8_t curr_press_h = 0, curr_press_m = 0, curr_press_s = 0;
	uint16_t curr_press_ms = 0, curr_press_us = 0;
	uint8_t first_press = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	8f a7       	std	Y+47, r24	; 0x2f
	uint8_t prev_hours = 0, prev_minutes = 0, prev_seconds = 0;
	uint16_t prev_milliseconds = 0, prev_microseconds = 0;
	uint8_t last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0;
	uint16_t last_press_milliseconds = 0, last_press_microseconds = 0;
	uint8_t prev_press_h = 0, prev_press_m = 0, prev_press_s = 0;
	uint16_t prev_press_ms = 0, prev_press_us = 0;
     35c:	1e a6       	std	Y+46, r1	; 0x2e
     35e:	1d a6       	std	Y+45, r1	; 0x2d
	uint16_t milliseconds = 0, microseconds = 0 ;
	uint8_t prev_hours = 0, prev_minutes = 0, prev_seconds = 0;
	uint16_t prev_milliseconds = 0, prev_microseconds = 0;
	uint8_t last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0;
	uint16_t last_press_milliseconds = 0, last_press_microseconds = 0;
	uint8_t prev_press_h = 0, prev_press_m = 0, prev_press_s = 0;
     360:	1c a6       	std	Y+44, r1	; 0x2c
     362:	1b a6       	std	Y+43, r1	; 0x2b
     364:	1a a6       	std	Y+42, r1	; 0x2a
	uint8_t hours = 0, minutes = 0, seconds = 0;
	uint16_t milliseconds = 0, microseconds = 0 ;
	uint8_t prev_hours = 0, prev_minutes = 0, prev_seconds = 0;
	uint16_t prev_milliseconds = 0, prev_microseconds = 0;
	uint8_t last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0;
	uint16_t last_press_milliseconds = 0, last_press_microseconds = 0;
     366:	a1 2c       	mov	r10, r1
     368:	b1 2c       	mov	r11, r1
	uint8_t sw_curr_mode = 0, sw_lasts_mode = 0;
	uint8_t hours = 0, minutes = 0, seconds = 0;
	uint16_t milliseconds = 0, microseconds = 0 ;
	uint8_t prev_hours = 0, prev_minutes = 0, prev_seconds = 0;
	uint16_t prev_milliseconds = 0, prev_microseconds = 0;
	uint8_t last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0;
     36a:	21 2c       	mov	r2, r1
     36c:	31 2c       	mov	r3, r1
     36e:	19 a6       	std	Y+41, r1	; 0x29
volatile uint8_t t_hours = 0;

int main(void){
	
	uint8_t button_prev_status = 0, button_curr_status = 0;
	uint8_t sw_curr_mode = 0, sw_lasts_mode = 0;
     370:	1c a2       	std	Y+36, r1	; 0x24
	FT232_init();
	MPU6050_Init();
	
    while (1){
		
		DIO_read(2,PORT_B,&button_curr_status);
     372:	ae 01       	movw	r20, r28
     374:	4f 5f       	subi	r20, 0xFF	; 255
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	62 e4       	ldi	r22, 0x42	; 66
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_read>
		
		/******************** Stopwatch Start, Calculate SPM and count *************************/
		
		if (button_curr_status==1 && button_prev_status==0){
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	09 f0       	breq	.+2      	; 0x388 <main+0x98>
     386:	c6 c0       	rjmp	.+396    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
			MPU6050_Read_Accel(&ax, &ay, &az);
     388:	ae 01       	movw	r20, r28
     38a:	43 5f       	subi	r20, 0xF3	; 243
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	be 01       	movw	r22, r28
     390:	65 5f       	subi	r22, 0xF5	; 245
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	ce 01       	movw	r24, r28
     396:	09 96       	adiw	r24, 0x09	; 9
     398:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <MPU6050_Read_Accel>
			MPU6050_Read_Gyro(&gx, &gy, &gz);
     39c:	ae 01       	movw	r20, r28
     39e:	4d 5e       	subi	r20, 0xED	; 237
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	be 01       	movw	r22, r28
     3a4:	6f 5e       	subi	r22, 0xEF	; 239
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	0f 96       	adiw	r24, 0x0f	; 15
     3ac:	0e 94 ab 03 	call	0x756	; 0x756 <MPU6050_Read_Gyro>
			MPU6050_Calculate_Angles(&pitch, &roll);
     3b0:	be 01       	movw	r22, r28
     3b2:	67 5e       	subi	r22, 0xE7	; 231
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	ce 01       	movw	r24, r28
     3b8:	45 96       	adiw	r24, 0x15	; 21
     3ba:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MPU6050_Calculate_Angles>
			sw_curr_mode = sw_mode_on;

			static uint8_t half_stroke = 0;   // 0 = catch, 1 = recovery

			if (half_stroke == 0) {   // count only on first press
     3be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     3c2:	81 11       	cpse	r24, r1
     3c4:	9f c0       	rjmp	.+318    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
				count++;
     3c6:	9f ef       	ldi	r25, 0xFF	; 255
     3c8:	89 1a       	sub	r8, r25
     3ca:	99 0a       	sbc	r9, r25
				if (count == 1) {
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	88 16       	cp	r8, r24
     3d0:	91 04       	cpc	r9, r1
     3d2:	21 f4       	brne	.+8      	; 0x3dc <main+0xec>
					Stopwatch_Reset();
     3d4:	0e 94 b9 04 	call	0x972	; 0x972 <Stopwatch_Reset>
					Stopwatch_Start();
     3d8:	0e 94 b4 04 	call	0x968	; 0x968 <Stopwatch_Start>
				}

				// Record stroke timestamp
				Stopwatch_GetTime(&curr_press_h, &curr_press_m, &curr_press_s, &curr_press_ms, &curr_press_us);
     3dc:	8e 01       	movw	r16, r28
     3de:	09 5f       	subi	r16, 0xF9	; 249
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	9e 01       	movw	r18, r28
     3e4:	2b 5f       	subi	r18, 0xFB	; 251
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255
     3e8:	ae 01       	movw	r20, r28
     3ea:	4c 5f       	subi	r20, 0xFC	; 252
     3ec:	5f 4f       	sbci	r21, 0xFF	; 255
     3ee:	be 01       	movw	r22, r28
     3f0:	6d 5f       	subi	r22, 0xFD	; 253
     3f2:	7f 4f       	sbci	r23, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	02 96       	adiw	r24, 0x02	; 2
     3f8:	0e 94 ca 04 	call	0x994	; 0x994 <Stopwatch_GetTime>

				if (!first_press) {
     3fc:	9f a5       	ldd	r25, Y+47	; 0x2f
     3fe:	91 11       	cpse	r25, r1
     400:	75 c0       	rjmp	.+234    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
					uint32_t t1_ms = (uint32_t)prev_press_h * 3600000UL + (uint32_t)prev_press_m * 60000UL + (uint32_t)prev_press_s * 1000UL + prev_press_ms;
     402:	8a a5       	ldd	r24, Y+42	; 0x2a
     404:	a8 2f       	mov	r26, r24
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	20 e8       	ldi	r18, 0x80	; 128
     40a:	3e ee       	ldi	r19, 0xEE	; 238
     40c:	46 e3       	ldi	r20, 0x36	; 54
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__muluhisi3>
     414:	6b 01       	movw	r12, r22
     416:	7c 01       	movw	r14, r24
     418:	9b a5       	ldd	r25, Y+43	; 0x2b
     41a:	29 2f       	mov	r18, r25
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	a0 e6       	ldi	r26, 0x60	; 96
     420:	ba ee       	ldi	r27, 0xEA	; 234
     422:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     426:	c6 0e       	add	r12, r22
     428:	d7 1e       	adc	r13, r23
     42a:	e8 1e       	adc	r14, r24
     42c:	f9 1e       	adc	r15, r25
     42e:	8c a5       	ldd	r24, Y+44	; 0x2c
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	a8 ee       	ldi	r26, 0xE8	; 232
     436:	b3 e0       	ldi	r27, 0x03	; 3
     438:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     43c:	c6 0e       	add	r12, r22
     43e:	d7 1e       	adc	r13, r23
     440:	e8 1e       	adc	r14, r24
     442:	f9 1e       	adc	r15, r25
     444:	8d a5       	ldd	r24, Y+45	; 0x2d
     446:	9e a5       	ldd	r25, Y+46	; 0x2e
     448:	c8 0e       	add	r12, r24
     44a:	d9 1e       	adc	r13, r25
     44c:	e1 1c       	adc	r14, r1
     44e:	f1 1c       	adc	r15, r1
					uint32_t t2_ms = (uint32_t)curr_press_h * 3600000UL + (uint32_t)curr_press_m * 60000UL + (uint32_t)curr_press_s * 1000UL + curr_press_ms;
     450:	aa 81       	ldd	r26, Y+2	; 0x02
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	20 e8       	ldi	r18, 0x80	; 128
     456:	3e ee       	ldi	r19, 0xEE	; 238
     458:	46 e3       	ldi	r20, 0x36	; 54
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__muluhisi3>
     460:	2b 01       	movw	r4, r22
     462:	3c 01       	movw	r6, r24
     464:	2b 81       	ldd	r18, Y+3	; 0x03
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	a0 e6       	ldi	r26, 0x60	; 96
     46a:	ba ee       	ldi	r27, 0xEA	; 234
     46c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     470:	46 0e       	add	r4, r22
     472:	57 1e       	adc	r5, r23
     474:	68 1e       	adc	r6, r24
     476:	79 1e       	adc	r7, r25
     478:	2c 81       	ldd	r18, Y+4	; 0x04
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a8 ee       	ldi	r26, 0xE8	; 232
     47e:	b3 e0       	ldi	r27, 0x03	; 3
     480:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	84 0d       	add	r24, r4
     48a:	95 1d       	adc	r25, r5
     48c:	a6 1d       	adc	r26, r6
     48e:	b7 1d       	adc	r27, r7
     490:	2d 81       	ldd	r18, Y+5	; 0x05
     492:	3e 81       	ldd	r19, Y+6	; 0x06
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	a1 1d       	adc	r26, r1
     49a:	b1 1d       	adc	r27, r1

					uint32_t delta_ms = (t2_ms >= t1_ms) ? (t2_ms - t1_ms) : (86400000UL + t2_ms - t1_ms);
     49c:	8c 15       	cp	r24, r12
     49e:	9d 05       	cpc	r25, r13
     4a0:	ae 05       	cpc	r26, r14
     4a2:	bf 05       	cpc	r27, r15
     4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	6c 19       	sub	r22, r12
     4ac:	7d 09       	sbc	r23, r13
     4ae:	8e 09       	sbc	r24, r14
     4b0:	9f 09       	sbc	r25, r15
     4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     4b4:	8c 19       	sub	r24, r12
     4b6:	9d 09       	sbc	r25, r13
     4b8:	ae 09       	sbc	r26, r14
     4ba:	bf 09       	sbc	r27, r15
     4bc:	bc 01       	movw	r22, r24
     4be:	cd 01       	movw	r24, r26
     4c0:	74 5a       	subi	r23, 0xA4	; 164
     4c2:	89 4d       	sbci	r24, 0xD9	; 217
     4c4:	9a 4f       	sbci	r25, 0xFA	; 250

					if (delta_ms > 0) {
     4c6:	61 15       	cp	r22, r1
     4c8:	71 05       	cpc	r23, r1
     4ca:	81 05       	cpc	r24, r1
     4cc:	91 05       	cpc	r25, r1
     4ce:	71 f0       	breq	.+28     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
						SPM = 60000.0 / delta_ms;  // strokes/min
     4d0:	0e 94 2a 07 	call	0xe54	; 0xe54 <__floatunsisf>
     4d4:	9b 01       	movw	r18, r22
     4d6:	ac 01       	movw	r20, r24
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e6       	ldi	r23, 0x60	; 96
     4dc:	8a e6       	ldi	r24, 0x6A	; 106
     4de:	97 e4       	ldi	r25, 0x47	; 71
     4e0:	0e 94 82 06 	call	0xd04	; 0xd04 <__divsf3>
     4e4:	6d a3       	std	Y+37, r22	; 0x25
     4e6:	7e a3       	std	Y+38, r23	; 0x26
     4e8:	8f a3       	std	Y+39, r24	; 0x27
     4ea:	98 a7       	std	Y+40, r25	; 0x28
					}
				}

				// Save for next stroke comparison
				prev_press_h = curr_press_h;
     4ec:	9a 81       	ldd	r25, Y+2	; 0x02
     4ee:	99 a7       	std	Y+41, r25	; 0x29
				prev_press_m = curr_press_m;
     4f0:	3b 80       	ldd	r3, Y+3	; 0x03
				prev_press_s = curr_press_s;
     4f2:	2c 80       	ldd	r2, Y+4	; 0x04
				prev_press_ms = curr_press_ms;
     4f4:	ad 80       	ldd	r10, Y+5	; 0x05
     4f6:	be 80       	ldd	r11, Y+6	; 0x06
     4f8:	be a6       	std	Y+46, r11	; 0x2e
     4fa:	ad a6       	std	Y+45, r10	; 0x2d
				}

				// Save for next stroke comparison
				prev_press_h = curr_press_h;
				prev_press_m = curr_press_m;
				prev_press_s = curr_press_s;
     4fc:	2c a6       	std	Y+44, r2	; 0x2c
					}
				}

				// Save for next stroke comparison
				prev_press_h = curr_press_h;
				prev_press_m = curr_press_m;
     4fe:	3b a6       	std	Y+43, r3	; 0x2b
						SPM = 60000.0 / delta_ms;  // strokes/min
					}
				}

				// Save for next stroke comparison
				prev_press_h = curr_press_h;
     500:	9a a7       	std	Y+42, r25	; 0x2a
				prev_press_m = curr_press_m;
				prev_press_s = curr_press_s;
				prev_press_ms = curr_press_ms;
				first_press = 0;
     502:	1f a6       	std	Y+47, r1	; 0x2f
				last_press_minutes = curr_press_m;
				last_press_seconds = curr_press_s;
				last_press_milliseconds = curr_press_ms;
			}

			half_stroke ^= 1;  // toggle each press
     504:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	89 27       	eor	r24, r25
     50c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		
		if (button_curr_status==1 && button_prev_status==0){
			MPU6050_Read_Accel(&ax, &ay, &az);
			MPU6050_Read_Gyro(&gx, &gy, &gz);
			MPU6050_Calculate_Angles(&pitch, &roll);
			sw_curr_mode = sw_mode_on;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	8c a3       	std	Y+36, r24	; 0x24
			half_stroke ^= 1;  // toggle each press
		}
		
		/*********************** Wait 15 sec to close SPM and Stopwatch ********************/\
		
		if (sw_curr_mode == sw_mode_on ) {
     514:	9c a1       	ldd	r25, Y+36	; 0x24
     516:	91 30       	cpi	r25, 0x01	; 1
     518:	09 f0       	breq	.+2      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     51a:	89 c0       	rjmp	.+274    	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
			if (sw_lasts_mode == sw_mode_pause){
				Stopwatch_Reset();
			}
			uint8_t curr_hours_t, curr_minutes_t, curr_seconds_t;
			uint16_t curr_milliseconds_t, curr_microsecond;
			Stopwatch_GetTime(&curr_hours_t, &curr_minutes_t, &curr_seconds_t, &curr_milliseconds_t, &curr_microsecond);
     51c:	8e 01       	movw	r16, r28
     51e:	03 5e       	subi	r16, 0xE3	; 227
     520:	1f 4f       	sbci	r17, 0xFF	; 255
     522:	9e 01       	movw	r18, r28
     524:	21 5e       	subi	r18, 0xE1	; 225
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	ae 01       	movw	r20, r28
     52a:	4f 5d       	subi	r20, 0xDF	; 223
     52c:	5f 4f       	sbci	r21, 0xFF	; 255
     52e:	be 01       	movw	r22, r28
     530:	6e 5d       	subi	r22, 0xDE	; 222
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	ce 01       	movw	r24, r28
     536:	83 96       	adiw	r24, 0x23	; 35
     538:	0e 94 ca 04 	call	0x994	; 0x994 <Stopwatch_GetTime>

			uint32_t t_now = (uint32_t)curr_hours_t * 3600000UL + (uint32_t)curr_minutes_t * 60000UL + (uint32_t)curr_seconds_t * 1000UL + curr_milliseconds_t;
     53c:	ab a1       	ldd	r26, Y+35	; 0x23
     53e:	b0 e0       	ldi	r27, 0x00	; 0
     540:	20 e8       	ldi	r18, 0x80	; 128
     542:	3e ee       	ldi	r19, 0xEE	; 238
     544:	46 e3       	ldi	r20, 0x36	; 54
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__muluhisi3>
     54c:	6b 01       	movw	r12, r22
     54e:	7c 01       	movw	r14, r24
     550:	2a a1       	ldd	r18, Y+34	; 0x22
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	a0 e6       	ldi	r26, 0x60	; 96
     556:	ba ee       	ldi	r27, 0xEA	; 234
     558:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     55c:	c6 0e       	add	r12, r22
     55e:	d7 1e       	adc	r13, r23
     560:	e8 1e       	adc	r14, r24
     562:	f9 1e       	adc	r15, r25
     564:	29 a1       	ldd	r18, Y+33	; 0x21
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	a8 ee       	ldi	r26, 0xE8	; 232
     56a:	b3 e0       	ldi	r27, 0x03	; 3
     56c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     570:	c6 0e       	add	r12, r22
     572:	d7 1e       	adc	r13, r23
     574:	e8 1e       	adc	r14, r24
     576:	f9 1e       	adc	r15, r25
     578:	8f 8d       	ldd	r24, Y+31	; 0x1f
     57a:	98 a1       	ldd	r25, Y+32	; 0x20
     57c:	c8 0e       	add	r12, r24
     57e:	d9 1e       	adc	r13, r25
     580:	e1 1c       	adc	r14, r1
     582:	f1 1c       	adc	r15, r1
			uint32_t t_last = (uint32_t)last_press_hours * 3600000UL + (uint32_t)last_press_minutes * 60000UL + (uint32_t)last_press_seconds * 1000UL + last_press_milliseconds;
     584:	89 a5       	ldd	r24, Y+41	; 0x29
     586:	a8 2f       	mov	r26, r24
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	20 e8       	ldi	r18, 0x80	; 128
     58c:	3e ee       	ldi	r19, 0xEE	; 238
     58e:	46 e3       	ldi	r20, 0x36	; 54
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__muluhisi3>
     596:	2b 01       	movw	r4, r22
     598:	3c 01       	movw	r6, r24
     59a:	23 2d       	mov	r18, r3
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	a0 e6       	ldi	r26, 0x60	; 96
     5a0:	ba ee       	ldi	r27, 0xEA	; 234
     5a2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     5a6:	46 0e       	add	r4, r22
     5a8:	57 1e       	adc	r5, r23
     5aa:	68 1e       	adc	r6, r24
     5ac:	79 1e       	adc	r7, r25
     5ae:	22 2d       	mov	r18, r2
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	a8 ee       	ldi	r26, 0xE8	; 232
     5b4:	b3 e0       	ldi	r27, 0x03	; 3
     5b6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	84 0d       	add	r24, r4
     5c0:	95 1d       	adc	r25, r5
     5c2:	a6 1d       	adc	r26, r6
     5c4:	b7 1d       	adc	r27, r7
     5c6:	8a 0d       	add	r24, r10
     5c8:	9b 1d       	adc	r25, r11
     5ca:	a1 1d       	adc	r26, r1
     5cc:	b1 1d       	adc	r27, r1

			uint32_t elapsed_ms = (t_now >= t_last) ? (t_now - t_last) : (86400000UL + t_now - t_last); // Handle day wrap-around
     5ce:	c8 16       	cp	r12, r24
     5d0:	d9 06       	cpc	r13, r25
     5d2:	ea 06       	cpc	r14, r26
     5d4:	fb 06       	cpc	r15, r27
     5d6:	28 f0       	brcs	.+10     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
     5d8:	c8 1a       	sub	r12, r24
     5da:	d9 0a       	sbc	r13, r25
     5dc:	ea 0a       	sbc	r14, r26
     5de:	fb 0a       	sbc	r15, r27
     5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5e2:	c8 1a       	sub	r12, r24
     5e4:	d9 0a       	sbc	r13, r25
     5e6:	ea 0a       	sbc	r14, r26
     5e8:	fb 0a       	sbc	r15, r27
     5ea:	94 ea       	ldi	r25, 0xA4	; 164
     5ec:	d9 1a       	sub	r13, r25
     5ee:	99 ed       	ldi	r25, 0xD9	; 217
     5f0:	e9 0a       	sbc	r14, r25
     5f2:	9a ef       	ldi	r25, 0xFA	; 250
     5f4:	f9 0a       	sbc	r15, r25

			if (elapsed_ms >= 15000) {
     5f6:	88 e9       	ldi	r24, 0x98	; 152
     5f8:	c8 16       	cp	r12, r24
     5fa:	8a e3       	ldi	r24, 0x3A	; 58
     5fc:	d8 06       	cpc	r13, r24
     5fe:	e1 04       	cpc	r14, r1
     600:	f1 04       	cpc	r15, r1
     602:	a8 f0       	brcs	.+42     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
				sw_curr_mode = sw_mode_pause;
				Stopwatch_Reset();
     604:	0e 94 b9 04 	call	0x972	; 0x972 <Stopwatch_Reset>
				count=0;
				curr_press_h = 0, curr_press_m = 0, curr_press_s = 0, curr_press_ms = 0;
     608:	1a 82       	std	Y+2, r1	; 0x02
     60a:	1b 82       	std	Y+3, r1	; 0x03
     60c:	1c 82       	std	Y+4, r1	; 0x04
     60e:	1e 82       	std	Y+6, r1	; 0x06
     610:	1d 82       	std	Y+5, r1	; 0x05
			uint32_t elapsed_ms = (t_now >= t_last) ? (t_now - t_last) : (86400000UL + t_now - t_last); // Handle day wrap-around

			if (elapsed_ms >= 15000) {
				sw_curr_mode = sw_mode_pause;
				Stopwatch_Reset();
				count=0;
     612:	81 2c       	mov	r8, r1
     614:	91 2c       	mov	r9, r1
				curr_press_h = 0, curr_press_m = 0, curr_press_s = 0, curr_press_ms = 0;
				prev_press_h = 0, prev_press_m = 0, prev_press_s = 0, prev_press_ms = 0;
     616:	1e a6       	std	Y+46, r1	; 0x2e
     618:	1d a6       	std	Y+45, r1	; 0x2d
     61a:	1c a6       	std	Y+44, r1	; 0x2c
     61c:	1b a6       	std	Y+43, r1	; 0x2b
     61e:	1a a6       	std	Y+42, r1	; 0x2a
				last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0, last_press_milliseconds = 0;
     620:	a1 2c       	mov	r10, r1
     622:	b1 2c       	mov	r11, r1
     624:	21 2c       	mov	r2, r1
     626:	31 2c       	mov	r3, r1
     628:	19 a6       	std	Y+41, r1	; 0x29
			uint32_t t_last = (uint32_t)last_press_hours * 3600000UL + (uint32_t)last_press_minutes * 60000UL + (uint32_t)last_press_seconds * 1000UL + last_press_milliseconds;

			uint32_t elapsed_ms = (t_now >= t_last) ? (t_now - t_last) : (86400000UL + t_now - t_last); // Handle day wrap-around

			if (elapsed_ms >= 15000) {
				sw_curr_mode = sw_mode_pause;
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	9c a3       	std	Y+36, r25	; 0x24
				prev_press_h = 0, prev_press_m = 0, prev_press_s = 0, prev_press_ms = 0;
				last_press_hours = 0, last_press_minutes = 0, last_press_seconds = 0, last_press_milliseconds = 0;
			}
		}
		
		lcd_print_float_line1(SPM);  // Print SPM
     62e:	6d a1       	ldd	r22, Y+37	; 0x25
     630:	7e a1       	ldd	r23, Y+38	; 0x26
     632:	8f a1       	ldd	r24, Y+39	; 0x27
     634:	98 a5       	ldd	r25, Y+40	; 0x28
     636:	0e 94 32 01 	call	0x264	; 0x264 <lcd_print_float_line1>
    }
     63a:	9b ce       	rjmp	.-714    	; 0x372 <main+0x82>

0000063c <MPU6050_Read_Multi>:

	*pitch = atan2(ax, sqrt(ay * ay + az * az)) * (180.0 / M_PI);
	*roll  = atan2(ay, sqrt(ax * ax + az * az)) * (180.0 / M_PI);
}

static void MPU6050_Read_Multi(uint8_t reg, uint8_t* data, uint8_t length) {
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	c8 2f       	mov	r28, r24
     64a:	8b 01       	movw	r16, r22
     64c:	d4 2f       	mov	r29, r20
	I2C_start();
     64e:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 0); // Write
     652:	80 ed       	ldi	r24, 0xD0	; 208
     654:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>
	I2C_write(reg);
     658:	8c 2f       	mov	r24, r28
     65a:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>
	I2C_stop();
     65e:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_stop>
	
	I2C_start();
     662:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 1); // Read
     666:	81 ed       	ldi	r24, 0xD1	; 209
     668:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>

	for (uint8_t i = 0; i < length - 1; i++) {
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	08 c0       	rjmp	.+16     	; 0x680 <MPU6050_Read_Multi+0x44>
		data[i] = I2C_read_ack();
     670:	78 01       	movw	r14, r16
     672:	ec 0e       	add	r14, r28
     674:	f1 1c       	adc	r15, r1
     676:	0e 94 bd 00 	call	0x17a	; 0x17a <I2C_read_ack>
     67a:	f7 01       	movw	r30, r14
     67c:	80 83       	st	Z, r24
	I2C_stop();
	
	I2C_start();
	I2C_write((MPU6050_ADDR << 1) | 1); // Read

	for (uint8_t i = 0; i < length - 1; i++) {
     67e:	cf 5f       	subi	r28, 0xFF	; 255
     680:	2c 2f       	mov	r18, r28
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	8d 2f       	mov	r24, r29
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	84 f3       	brlt	.-32     	; 0x670 <MPU6050_Read_Multi+0x34>
		data[i] = I2C_read_ack();
	}
	data[length - 1] = I2C_read_nack();
     690:	8d 2f       	mov	r24, r29
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	e8 01       	movw	r28, r16
     698:	c8 0f       	add	r28, r24
     69a:	d9 1f       	adc	r29, r25
     69c:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_read_nack>
     6a0:	88 83       	st	Y, r24
	I2C_stop();
     6a2:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_stop>
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <MPU6050_Init>:

//static uint8_t MPU6050_Read_Register(uint8_t reg);
static void MPU6050_Read_Multi(uint8_t reg, uint8_t* data, uint8_t length);

void MPU6050_Init(void) {
	I2C_init();
     6b4:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_init>
	I2C_start();
     6b8:	0e 94 b0 00 	call	0x160	; 0x160 <I2C_start>
	I2C_write((MPU6050_ADDR << 1) | 0);
     6bc:	80 ed       	ldi	r24, 0xD0	; 208
     6be:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>
	I2C_write(MPU6050_PWR_MGMT_1);
     6c2:	8b e6       	ldi	r24, 0x6B	; 107
     6c4:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>
	I2C_write(0x00);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_write>
	I2C_stop();
     6ce:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_stop>
     6d2:	08 95       	ret

000006d4 <MPU6050_Read_Accel>:
}

void MPU6050_Read_Accel(int16_t* ax, int16_t* ay, int16_t* az) {
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <MPU6050_Read_Accel+0x12>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <MPU6050_Read_Accel+0x14>
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <MPU6050_Read_Accel+0x16>
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	6c 01       	movw	r12, r24
     6f0:	7b 01       	movw	r14, r22
     6f2:	8a 01       	movw	r16, r20
	uint8_t data[6];
	MPU6050_Read_Multi(MPU6050_ACCEL_XOUT_H, data, 6);
     6f4:	46 e0       	ldi	r20, 0x06	; 6
     6f6:	be 01       	movw	r22, r28
     6f8:	6f 5f       	subi	r22, 0xFF	; 255
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	8b e3       	ldi	r24, 0x3B	; 59
     6fe:	0e 94 1e 03 	call	0x63c	; 0x63c <MPU6050_Read_Multi>

	*ax = (int16_t)(data[0] << 8 | data[1]);
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	98 2f       	mov	r25, r24
     708:	88 27       	eor	r24, r24
     70a:	2a 81       	ldd	r18, Y+2	; 0x02
     70c:	82 2b       	or	r24, r18
     70e:	f6 01       	movw	r30, r12
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24
	*ay = (int16_t)(data[2] << 8 | data[3]);
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	98 2f       	mov	r25, r24
     71a:	88 27       	eor	r24, r24
     71c:	2c 81       	ldd	r18, Y+4	; 0x04
     71e:	82 2b       	or	r24, r18
     720:	f7 01       	movw	r30, r14
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	80 83       	st	Z, r24
	*az = (int16_t)(data[4] << 8 | data[5]);
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	98 2f       	mov	r25, r24
     72c:	88 27       	eor	r24, r24
     72e:	2e 81       	ldd	r18, Y+6	; 0x06
     730:	82 2b       	or	r24, r18
     732:	f8 01       	movw	r30, r16
     734:	91 83       	std	Z+1, r25	; 0x01
     736:	80 83       	st	Z, r24
}
     738:	26 96       	adiw	r28, 0x06	; 6
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	08 95       	ret

00000756 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(int16_t* gx, int16_t* gy, int16_t* gz) {
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <MPU6050_Read_Gyro+0x12>
     768:	00 d0       	rcall	.+0      	; 0x76a <MPU6050_Read_Gyro+0x14>
     76a:	00 d0       	rcall	.+0      	; 0x76c <MPU6050_Read_Gyro+0x16>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	6c 01       	movw	r12, r24
     772:	7b 01       	movw	r14, r22
     774:	8a 01       	movw	r16, r20
	uint8_t data[6];
	MPU6050_Read_Multi(MPU6050_GYRO_XOUT_H, data, 6);
     776:	46 e0       	ldi	r20, 0x06	; 6
     778:	be 01       	movw	r22, r28
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	83 e4       	ldi	r24, 0x43	; 67
     780:	0e 94 1e 03 	call	0x63c	; 0x63c <MPU6050_Read_Multi>

	*gx = (int16_t)(data[0] << 8 | data[1]);
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	98 2f       	mov	r25, r24
     78a:	88 27       	eor	r24, r24
     78c:	2a 81       	ldd	r18, Y+2	; 0x02
     78e:	82 2b       	or	r24, r18
     790:	f6 01       	movw	r30, r12
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
	*gy = (int16_t)(data[2] << 8 | data[3]);
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	98 2f       	mov	r25, r24
     79c:	88 27       	eor	r24, r24
     79e:	2c 81       	ldd	r18, Y+4	; 0x04
     7a0:	82 2b       	or	r24, r18
     7a2:	f7 01       	movw	r30, r14
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
	*gz = (int16_t)(data[4] << 8 | data[5]);
     7a8:	8d 81       	ldd	r24, Y+5	; 0x05
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	98 2f       	mov	r25, r24
     7ae:	88 27       	eor	r24, r24
     7b0:	2e 81       	ldd	r18, Y+6	; 0x06
     7b2:	82 2b       	or	r24, r18
     7b4:	f8 01       	movw	r30, r16
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
}
     7ba:	26 96       	adiw	r28, 0x06	; 6
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret

000007d8 <MPU6050_Calculate_Angles>:

void MPU6050_Calculate_Angles(float* pitch, float* roll) {
     7d8:	2f 92       	push	r2
     7da:	3f 92       	push	r3
     7dc:	4f 92       	push	r4
     7de:	5f 92       	push	r5
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	2a 97       	sbiw	r28, 0x0a	; 10
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	8c 01       	movw	r16, r24
     80e:	1b 01       	movw	r2, r22
	int16_t ax_raw, ay_raw, az_raw;
	MPU6050_Read_Accel(&ax_raw, &ay_raw, &az_raw);
     810:	ae 01       	movw	r20, r28
     812:	4b 5f       	subi	r20, 0xFB	; 251
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	be 01       	movw	r22, r28
     818:	6d 5f       	subi	r22, 0xFD	; 253
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <MPU6050_Read_Accel>

	float ax = ax_raw / 16384.0;
     824:	69 81       	ldd	r22, Y+1	; 0x01
     826:	7a 81       	ldd	r23, Y+2	; 0x02
     828:	07 2e       	mov	r0, r23
     82a:	00 0c       	add	r0, r0
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatsisf>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	58 e3       	ldi	r21, 0x38	; 56
     83c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
	float ay = ay_raw / 16384.0;
     844:	6b 81       	ldd	r22, Y+3	; 0x03
     846:	7c 81       	ldd	r23, Y+4	; 0x04
     848:	07 2e       	mov	r0, r23
     84a:	00 0c       	add	r0, r0
     84c:	88 0b       	sbc	r24, r24
     84e:	99 0b       	sbc	r25, r25
     850:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatsisf>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e8       	ldi	r20, 0x80	; 128
     85a:	58 e3       	ldi	r21, 0x38	; 56
     85c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
	float az = az_raw / 16384.0;
     864:	6d 81       	ldd	r22, Y+5	; 0x05
     866:	7e 81       	ldd	r23, Y+6	; 0x06
     868:	07 2e       	mov	r0, r23
     86a:	00 0c       	add	r0, r0
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatsisf>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e8       	ldi	r20, 0x80	; 128
     87a:	58 e3       	ldi	r21, 0x38	; 56
     87c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     880:	2b 01       	movw	r4, r22
     882:	3c 01       	movw	r6, r24

	*pitch = atan2(ax, sqrt(ay * ay + az * az)) * (180.0 / M_PI);
     884:	a7 01       	movw	r20, r14
     886:	96 01       	movw	r18, r12
     888:	c7 01       	movw	r24, r14
     88a:	b6 01       	movw	r22, r12
     88c:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     890:	6f 83       	std	Y+7, r22	; 0x07
     892:	78 87       	std	Y+8, r23	; 0x08
     894:	89 87       	std	Y+9, r24	; 0x09
     896:	9a 87       	std	Y+10, r25	; 0x0a
     898:	a3 01       	movw	r20, r6
     89a:	92 01       	movw	r18, r4
     89c:	c3 01       	movw	r24, r6
     89e:	b2 01       	movw	r22, r4
     8a0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     8a4:	2b 01       	movw	r4, r22
     8a6:	3c 01       	movw	r6, r24
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	6f 81       	ldd	r22, Y+7	; 0x07
     8ae:	78 85       	ldd	r23, Y+8	; 0x08
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__addsf3>
     8b8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <sqrt>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <atan2>
     8c8:	20 ee       	ldi	r18, 0xE0	; 224
     8ca:	3e e2       	ldi	r19, 0x2E	; 46
     8cc:	45 e6       	ldi	r20, 0x65	; 101
     8ce:	52 e4       	ldi	r21, 0x42	; 66
     8d0:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     8d4:	f8 01       	movw	r30, r16
     8d6:	60 83       	st	Z, r22
     8d8:	71 83       	std	Z+1, r23	; 0x01
     8da:	82 83       	std	Z+2, r24	; 0x02
     8dc:	93 83       	std	Z+3, r25	; 0x03
	*roll  = atan2(ay, sqrt(ax * ax + az * az)) * (180.0 / M_PI);
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	c5 01       	movw	r24, r10
     8e4:	b4 01       	movw	r22, r8
     8e6:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     8ea:	9b 01       	movw	r18, r22
     8ec:	ac 01       	movw	r20, r24
     8ee:	c3 01       	movw	r24, r6
     8f0:	b2 01       	movw	r22, r4
     8f2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__addsf3>
     8f6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <sqrt>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c7 01       	movw	r24, r14
     900:	b6 01       	movw	r22, r12
     902:	0e 94 1e 06 	call	0xc3c	; 0xc3c <atan2>
     906:	20 ee       	ldi	r18, 0xE0	; 224
     908:	3e e2       	ldi	r19, 0x2E	; 46
     90a:	45 e6       	ldi	r20, 0x65	; 101
     90c:	52 e4       	ldi	r21, 0x42	; 66
     90e:	0e 94 0b 08 	call	0x1016	; 0x1016 <__mulsf3>
     912:	f1 01       	movw	r30, r2
     914:	60 83       	st	Z, r22
     916:	71 83       	std	Z+1, r23	; 0x01
     918:	82 83       	std	Z+2, r24	; 0x02
     91a:	93 83       	std	Z+3, r25	; 0x03
}
     91c:	2a 96       	adiw	r28, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	7f 90       	pop	r7
     942:	6f 90       	pop	r6
     944:	5f 90       	pop	r5
     946:	4f 90       	pop	r4
     948:	3f 90       	pop	r3
     94a:	2f 90       	pop	r2
     94c:	08 95       	ret

0000094e <Stopwatch_Init>:
	TCCR1B |= (1 << CS10);
	sei();
}

void Stopwatch_Stop(void) {
	TCCR1B &= ~(1 << CS10);
     94e:	1f bc       	out	0x2f, r1	; 47
     950:	1e bc       	out	0x2e, r1	; 46
     952:	8e b5       	in	r24, 0x2e	; 46
     954:	88 60       	ori	r24, 0x08	; 8
     956:	8e bd       	out	0x2e, r24	; 46
     958:	87 e0       	ldi	r24, 0x07	; 7
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	9b bd       	out	0x2b, r25	; 43
     95e:	8a bd       	out	0x2a, r24	; 42
     960:	89 b7       	in	r24, 0x39	; 57
     962:	80 61       	ori	r24, 0x10	; 16
     964:	89 bf       	out	0x39, r24	; 57
     966:	08 95       	ret

00000968 <Stopwatch_Start>:
     968:	8e b5       	in	r24, 0x2e	; 46
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	8e bd       	out	0x2e, r24	; 46
     96e:	78 94       	sei
     970:	08 95       	ret

00000972 <Stopwatch_Reset>:
}

void Stopwatch_Reset(void) {
	cli();
     972:	f8 94       	cli
	stopwatch_hours = 0;
     974:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <stopwatch_hours>
	stopwatch_minutes = 0;
     978:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <stopwatch_minutes>
	stopwatch_seconds = 0;
     97c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <stopwatch_seconds>
	stopwatch_milliseconds = 0;
     980:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <stopwatch_milliseconds+0x1>
     984:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <stopwatch_milliseconds>
	stopwatch_microseconds = 0;
     988:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <stopwatch_microseconds+0x1>
     98c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <stopwatch_microseconds>
	sei();
     990:	78 94       	sei
     992:	08 95       	ret

00000994 <Stopwatch_GetTime>:
}

void Stopwatch_GetTime(uint8_t* h, uint8_t* m, uint8_t* s, uint16_t* ms, uint16_t* us) {
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
	cli();
     998:	f8 94       	cli
	*h = stopwatch_hours;
     99a:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <stopwatch_hours>
     99e:	dc 01       	movw	r26, r24
     9a0:	ec 93       	st	X, r30
	*m = stopwatch_minutes;
     9a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch_minutes>
     9a6:	fb 01       	movw	r30, r22
     9a8:	80 83       	st	Z, r24
	*s = stopwatch_seconds;
     9aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <stopwatch_seconds>
     9ae:	da 01       	movw	r26, r20
     9b0:	8c 93       	st	X, r24
	*ms = stopwatch_milliseconds;
     9b2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <stopwatch_milliseconds>
     9b6:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <stopwatch_milliseconds+0x1>
     9ba:	f9 01       	movw	r30, r18
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
	*us = stopwatch_microseconds;
     9c0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <stopwatch_microseconds>
     9c4:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <stopwatch_microseconds+0x1>
     9c8:	d8 01       	movw	r26, r16
     9ca:	8d 93       	st	X+, r24
     9cc:	9c 93       	st	X, r25
	sei();
     9ce:	78 94       	sei
}
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
     9d6:	1f 92       	push	r1
     9d8:	0f 92       	push	r0
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	0f 92       	push	r0
     9de:	11 24       	eor	r1, r1
     9e0:	2f 93       	push	r18
     9e2:	8f 93       	push	r24
     9e4:	9f 93       	push	r25
	stopwatch_microseconds++;
     9e6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <stopwatch_microseconds>
     9ea:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <stopwatch_microseconds+0x1>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <stopwatch_microseconds+0x1>
     9f4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <stopwatch_microseconds>

	if (stopwatch_microseconds >= 1000) {
     9f8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <stopwatch_microseconds>
     9fc:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <stopwatch_microseconds+0x1>
     a00:	88 3e       	cpi	r24, 0xE8	; 232
     a02:	93 40       	sbci	r25, 0x03	; 3
     a04:	c8 f1       	brcs	.+114    	; 0xa78 <__vector_7+0xa2>
		stopwatch_microseconds = 0;
     a06:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <stopwatch_microseconds+0x1>
     a0a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <stopwatch_microseconds>
		stopwatch_milliseconds++;
     a0e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <stopwatch_milliseconds>
     a12:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <stopwatch_milliseconds+0x1>
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <stopwatch_milliseconds+0x1>
     a1c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <stopwatch_milliseconds>

		if (stopwatch_milliseconds >= 1000) {
     a20:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <stopwatch_milliseconds>
     a24:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <stopwatch_milliseconds+0x1>
     a28:	88 3e       	cpi	r24, 0xE8	; 232
     a2a:	93 40       	sbci	r25, 0x03	; 3
     a2c:	28 f1       	brcs	.+74     	; 0xa78 <__vector_7+0xa2>
			stopwatch_milliseconds = 0;
     a2e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <stopwatch_milliseconds+0x1>
     a32:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <stopwatch_milliseconds>
			stopwatch_seconds++;
     a36:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <stopwatch_seconds>
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <stopwatch_seconds>

			if (stopwatch_seconds >= 60) {
     a40:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <stopwatch_seconds>
     a44:	8c 33       	cpi	r24, 0x3C	; 60
     a46:	c0 f0       	brcs	.+48     	; 0xa78 <__vector_7+0xa2>
				stopwatch_seconds = 0;
     a48:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <stopwatch_seconds>
				stopwatch_minutes++;
     a4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch_minutes>
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <stopwatch_minutes>

				if (stopwatch_minutes >= 60) {
     a56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <stopwatch_minutes>
     a5a:	8c 33       	cpi	r24, 0x3C	; 60
     a5c:	68 f0       	brcs	.+26     	; 0xa78 <__vector_7+0xa2>
					stopwatch_minutes = 0;
     a5e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <stopwatch_minutes>
					stopwatch_hours++;
     a62:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <stopwatch_hours>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <stopwatch_hours>

					if (stopwatch_hours >= 24)
     a6c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <stopwatch_hours>
     a70:	88 31       	cpi	r24, 0x18	; 24
     a72:	10 f0       	brcs	.+4      	; 0xa78 <__vector_7+0xa2>
					stopwatch_hours = 0;
     a74:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <stopwatch_hours>
				}
			}
		}
	}
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_9>:
/*
	This ISR is triggered automatically when Timer1 overflows (TCNT1 reaches 0xFFFF and rolls back to 0).
	It checks if a callback function has been assigned using Timer1_SetCallbackOverflow(), and if so, it calls that function.
*/

ISR(TIMER1_OVF_vect){
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
	if (overflowCallback)
     aaa:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <overflowCallback>
     aae:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <overflowCallback+0x1>
     ab2:	30 97       	sbiw	r30, 0x00	; 0
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__vector_9+0x30>
	overflowCallback(); // Call the user-defined overflow handler (if set)
     ab6:	09 95       	icall
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_8>:
	This ISR is triggered when Timer1's counter (TCNT1) matches the value in OCR1B.
	It can be used in CTC or PWM modes where a second compare channel is useful (e.g., dual event timing).
	It checks if a callback function has been assigned using Timer1_SetCallbackCompareMatchB(), and if so, it calls that function.
*/

ISR(TIMER1_COMPB_vect){
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
	if (compareMatchBCallback)
     afc:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <compareMatchBCallback>
     b00:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <compareMatchBCallback+0x1>
     b04:	30 97       	sbiw	r30, 0x00	; 0
     b06:	09 f0       	breq	.+2      	; 0xb0a <__vector_8+0x30>
	compareMatchBCallback(); // Call the user-defined Compare Match B handler (if set)
     b08:	09 95       	icall
}
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <UART_init>:
	This function sets up the UART peripheral for serial communication.
	It uses a predefined F_CPU (CPU clock frequency) and BAUD_RATE to set the correct baud rate.
*/
void UART_init(void){
	uint16_t ubrr_value = (F_CPU / (16UL * BAUD_RATE)) - 1; //This calculates the UBRR (USART Baud Rate Register) value using the formula from the datasheet:
	UBRRL = (uint8_t)ubrr_value; //Writes the lower 8 bits of ubrr_value to the USART Baud Rate Register Low (UBRRL).
     b2c:	83 e3       	ldi	r24, 0x33	; 51
     b2e:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(ubrr_value >> 8); //Writes the upper 8 bits of ubrr_value to the USART Baud Rate Register High (UBRRH).
     b30:	10 bc       	out	0x20, r1	; 32
	/*	
		RXEN: The receiver, to allow receiving data over UART.
		TXEN: The transmitter, to allow sending data over UART.
	*/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     b32:	88 e1       	ldi	r24, 0x18	; 24
     b34:	8a b9       	out	0x0a, r24	; 10
		Configures the USART Control and Status Register C (UCSRC):
		URSEL: Must be set to write to UCSRC instead of UBRRH (on ATmega32).
		UCSZ1 and UCSZ0: Set the frame format to 8-bit data.
		This combination (UCSZ1=1, UCSZ0=1) selects 8 data bits (most common setting).
	*/
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     b36:	86 e8       	ldi	r24, 0x86	; 134
     b38:	80 bd       	out	0x20, r24	; 32
     b3a:	08 95       	ret

00000b3c <__subsf3>:
     b3c:	50 58       	subi	r21, 0x80	; 128

00000b3e <__addsf3>:
     b3e:	bb 27       	eor	r27, r27
     b40:	aa 27       	eor	r26, r26
     b42:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__addsf3x>
     b46:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_round>
     b4a:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
     b4e:	38 f0       	brcs	.+14     	; 0xb5e <__addsf3+0x20>
     b50:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
     b54:	20 f0       	brcs	.+8      	; 0xb5e <__addsf3+0x20>
     b56:	39 f4       	brne	.+14     	; 0xb66 <__addsf3+0x28>
     b58:	9f 3f       	cpi	r25, 0xFF	; 255
     b5a:	19 f4       	brne	.+6      	; 0xb62 <__addsf3+0x24>
     b5c:	26 f4       	brtc	.+8      	; 0xb66 <__addsf3+0x28>
     b5e:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_nan>
     b62:	0e f4       	brtc	.+2      	; 0xb66 <__addsf3+0x28>
     b64:	e0 95       	com	r30
     b66:	e7 fb       	bst	r30, 7
     b68:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_inf>

00000b6c <__addsf3x>:
     b6c:	e9 2f       	mov	r30, r25
     b6e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_split3>
     b72:	58 f3       	brcs	.-42     	; 0xb4a <__addsf3+0xc>
     b74:	ba 17       	cp	r27, r26
     b76:	62 07       	cpc	r22, r18
     b78:	73 07       	cpc	r23, r19
     b7a:	84 07       	cpc	r24, r20
     b7c:	95 07       	cpc	r25, r21
     b7e:	20 f0       	brcs	.+8      	; 0xb88 <__addsf3x+0x1c>
     b80:	79 f4       	brne	.+30     	; 0xba0 <__addsf3x+0x34>
     b82:	a6 f5       	brtc	.+104    	; 0xbec <__addsf3x+0x80>
     b84:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_zero>
     b88:	0e f4       	brtc	.+2      	; 0xb8c <__addsf3x+0x20>
     b8a:	e0 95       	com	r30
     b8c:	0b 2e       	mov	r0, r27
     b8e:	ba 2f       	mov	r27, r26
     b90:	a0 2d       	mov	r26, r0
     b92:	0b 01       	movw	r0, r22
     b94:	b9 01       	movw	r22, r18
     b96:	90 01       	movw	r18, r0
     b98:	0c 01       	movw	r0, r24
     b9a:	ca 01       	movw	r24, r20
     b9c:	a0 01       	movw	r20, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	ff 27       	eor	r31, r31
     ba2:	59 1b       	sub	r21, r25
     ba4:	99 f0       	breq	.+38     	; 0xbcc <__addsf3x+0x60>
     ba6:	59 3f       	cpi	r21, 0xF9	; 249
     ba8:	50 f4       	brcc	.+20     	; 0xbbe <__addsf3x+0x52>
     baa:	50 3e       	cpi	r21, 0xE0	; 224
     bac:	68 f1       	brcs	.+90     	; 0xc08 <__addsf3x+0x9c>
     bae:	1a 16       	cp	r1, r26
     bb0:	f0 40       	sbci	r31, 0x00	; 0
     bb2:	a2 2f       	mov	r26, r18
     bb4:	23 2f       	mov	r18, r19
     bb6:	34 2f       	mov	r19, r20
     bb8:	44 27       	eor	r20, r20
     bba:	58 5f       	subi	r21, 0xF8	; 248
     bbc:	f3 cf       	rjmp	.-26     	; 0xba4 <__addsf3x+0x38>
     bbe:	46 95       	lsr	r20
     bc0:	37 95       	ror	r19
     bc2:	27 95       	ror	r18
     bc4:	a7 95       	ror	r26
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	53 95       	inc	r21
     bca:	c9 f7       	brne	.-14     	; 0xbbe <__addsf3x+0x52>
     bcc:	7e f4       	brtc	.+30     	; 0xbec <__addsf3x+0x80>
     bce:	1f 16       	cp	r1, r31
     bd0:	ba 0b       	sbc	r27, r26
     bd2:	62 0b       	sbc	r22, r18
     bd4:	73 0b       	sbc	r23, r19
     bd6:	84 0b       	sbc	r24, r20
     bd8:	ba f0       	brmi	.+46     	; 0xc08 <__addsf3x+0x9c>
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	a1 f0       	breq	.+40     	; 0xc06 <__addsf3x+0x9a>
     bde:	ff 0f       	add	r31, r31
     be0:	bb 1f       	adc	r27, r27
     be2:	66 1f       	adc	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	88 1f       	adc	r24, r24
     be8:	c2 f7       	brpl	.-16     	; 0xbda <__addsf3x+0x6e>
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <__addsf3x+0x9c>
     bec:	ba 0f       	add	r27, r26
     bee:	62 1f       	adc	r22, r18
     bf0:	73 1f       	adc	r23, r19
     bf2:	84 1f       	adc	r24, r20
     bf4:	48 f4       	brcc	.+18     	; 0xc08 <__addsf3x+0x9c>
     bf6:	87 95       	ror	r24
     bf8:	77 95       	ror	r23
     bfa:	67 95       	ror	r22
     bfc:	b7 95       	ror	r27
     bfe:	f7 95       	ror	r31
     c00:	9e 3f       	cpi	r25, 0xFE	; 254
     c02:	08 f0       	brcs	.+2      	; 0xc06 <__addsf3x+0x9a>
     c04:	b0 cf       	rjmp	.-160    	; 0xb66 <__addsf3+0x28>
     c06:	93 95       	inc	r25
     c08:	88 0f       	add	r24, r24
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <__addsf3x+0xa2>
     c0c:	99 27       	eor	r25, r25
     c0e:	ee 0f       	add	r30, r30
     c10:	97 95       	ror	r25
     c12:	87 95       	ror	r24
     c14:	08 95       	ret
     c16:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
     c1a:	60 f0       	brcs	.+24     	; 0xc34 <__addsf3x+0xc8>
     c1c:	80 e8       	ldi	r24, 0x80	; 128
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	09 f4       	brne	.+2      	; 0xc24 <__addsf3x+0xb8>
     c22:	9e ef       	ldi	r25, 0xFE	; 254
     c24:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__addsf3x+0xc8>
     c2a:	40 e8       	ldi	r20, 0x80	; 128
     c2c:	51 e0       	ldi	r21, 0x01	; 1
     c2e:	71 f4       	brne	.+28     	; 0xc4c <atan2+0x10>
     c30:	5e ef       	ldi	r21, 0xFE	; 254
     c32:	0c c0       	rjmp	.+24     	; 0xc4c <atan2+0x10>
     c34:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_nan>
     c38:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_zero>

00000c3c <atan2>:
     c3c:	e9 2f       	mov	r30, r25
     c3e:	e0 78       	andi	r30, 0x80	; 128
     c40:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_split3>
     c44:	40 f3       	brcs	.-48     	; 0xc16 <__addsf3x+0xaa>
     c46:	09 2e       	mov	r0, r25
     c48:	05 2a       	or	r0, r21
     c4a:	b1 f3       	breq	.-20     	; 0xc38 <__addsf3x+0xcc>
     c4c:	26 17       	cp	r18, r22
     c4e:	37 07       	cpc	r19, r23
     c50:	48 07       	cpc	r20, r24
     c52:	59 07       	cpc	r21, r25
     c54:	38 f0       	brcs	.+14     	; 0xc64 <atan2+0x28>
     c56:	0e 2e       	mov	r0, r30
     c58:	07 f8       	bld	r0, 7
     c5a:	e0 25       	eor	r30, r0
     c5c:	69 f0       	breq	.+26     	; 0xc78 <atan2+0x3c>
     c5e:	e0 25       	eor	r30, r0
     c60:	e0 64       	ori	r30, 0x40	; 64
     c62:	0a c0       	rjmp	.+20     	; 0xc78 <atan2+0x3c>
     c64:	ef 63       	ori	r30, 0x3F	; 63
     c66:	07 f8       	bld	r0, 7
     c68:	00 94       	com	r0
     c6a:	07 fa       	bst	r0, 7
     c6c:	db 01       	movw	r26, r22
     c6e:	b9 01       	movw	r22, r18
     c70:	9d 01       	movw	r18, r26
     c72:	dc 01       	movw	r26, r24
     c74:	ca 01       	movw	r24, r20
     c76:	ad 01       	movw	r20, r26
     c78:	ef 93       	push	r30
     c7a:	0e 94 99 06 	call	0xd32	; 0xd32 <__divsf3_pse>
     c7e:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_round>
     c82:	0e 94 4e 06 	call	0xc9c	; 0xc9c <atan>
     c86:	5f 91       	pop	r21
     c88:	55 23       	and	r21, r21
     c8a:	39 f0       	breq	.+14     	; 0xc9a <atan2+0x5e>
     c8c:	2b ed       	ldi	r18, 0xDB	; 219
     c8e:	3f e0       	ldi	r19, 0x0F	; 15
     c90:	49 e4       	ldi	r20, 0x49	; 73
     c92:	50 fd       	sbrc	r21, 0
     c94:	49 ec       	ldi	r20, 0xC9	; 201
     c96:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__addsf3>
     c9a:	08 95       	ret

00000c9c <atan>:
     c9c:	df 93       	push	r29
     c9e:	dd 27       	eor	r29, r29
     ca0:	b9 2f       	mov	r27, r25
     ca2:	bf 77       	andi	r27, 0x7F	; 127
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	16 16       	cp	r1, r22
     caa:	17 06       	cpc	r1, r23
     cac:	48 07       	cpc	r20, r24
     cae:	5b 07       	cpc	r21, r27
     cb0:	18 f4       	brcc	.+6      	; 0xcb8 <atan+0x1c>
     cb2:	d9 2f       	mov	r29, r25
     cb4:	0e 94 03 08 	call	0x1006	; 0x1006 <inverse>
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	7f 93       	push	r23
     cbe:	6f 93       	push	r22
     cc0:	0e 94 be 08 	call	0x117c	; 0x117c <square>
     cc4:	e4 e5       	ldi	r30, 0x54	; 84
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	0e 94 94 07 	call	0xf28	; 0xf28 <__fp_powser>
     ccc:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_round>
     cd0:	2f 91       	pop	r18
     cd2:	3f 91       	pop	r19
     cd4:	4f 91       	pop	r20
     cd6:	5f 91       	pop	r21
     cd8:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3x>
     cdc:	dd 23       	and	r29, r29
     cde:	51 f0       	breq	.+20     	; 0xcf4 <atan+0x58>
     ce0:	90 58       	subi	r25, 0x80	; 128
     ce2:	a2 ea       	ldi	r26, 0xA2	; 162
     ce4:	2a ed       	ldi	r18, 0xDA	; 218
     ce6:	3f e0       	ldi	r19, 0x0F	; 15
     ce8:	49 ec       	ldi	r20, 0xC9	; 201
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	d0 78       	andi	r29, 0x80	; 128
     cee:	5d 27       	eor	r21, r29
     cf0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__addsf3x>
     cf4:	df 91       	pop	r29
     cf6:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_round>

00000cfa <__cmpsf2>:
     cfa:	0e 94 67 07 	call	0xece	; 0xece <__fp_cmp>
     cfe:	08 f4       	brcc	.+2      	; 0xd02 <__cmpsf2+0x8>
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <__divsf3>:
     d04:	0e 94 96 06 	call	0xd2c	; 0xd2c <__divsf3x>
     d08:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_round>
     d0c:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
     d10:	58 f0       	brcs	.+22     	; 0xd28 <__divsf3+0x24>
     d12:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
     d16:	40 f0       	brcs	.+16     	; 0xd28 <__divsf3+0x24>
     d18:	29 f4       	brne	.+10     	; 0xd24 <__divsf3+0x20>
     d1a:	5f 3f       	cpi	r21, 0xFF	; 255
     d1c:	29 f0       	breq	.+10     	; 0xd28 <__divsf3+0x24>
     d1e:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_inf>
     d22:	51 11       	cpse	r21, r1
     d24:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_szero>
     d28:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_nan>

00000d2c <__divsf3x>:
     d2c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_split3>
     d30:	68 f3       	brcs	.-38     	; 0xd0c <__divsf3+0x8>

00000d32 <__divsf3_pse>:
     d32:	99 23       	and	r25, r25
     d34:	b1 f3       	breq	.-20     	; 0xd22 <__divsf3+0x1e>
     d36:	55 23       	and	r21, r21
     d38:	91 f3       	breq	.-28     	; 0xd1e <__divsf3+0x1a>
     d3a:	95 1b       	sub	r25, r21
     d3c:	55 0b       	sbc	r21, r21
     d3e:	bb 27       	eor	r27, r27
     d40:	aa 27       	eor	r26, r26
     d42:	62 17       	cp	r22, r18
     d44:	73 07       	cpc	r23, r19
     d46:	84 07       	cpc	r24, r20
     d48:	38 f0       	brcs	.+14     	; 0xd58 <__divsf3_pse+0x26>
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	aa 1f       	adc	r26, r26
     d56:	a9 f3       	breq	.-22     	; 0xd42 <__divsf3_pse+0x10>
     d58:	35 d0       	rcall	.+106    	; 0xdc4 <__divsf3_pse+0x92>
     d5a:	0e 2e       	mov	r0, r30
     d5c:	3a f0       	brmi	.+14     	; 0xd6c <__divsf3_pse+0x3a>
     d5e:	e0 e8       	ldi	r30, 0x80	; 128
     d60:	32 d0       	rcall	.+100    	; 0xdc6 <__divsf3_pse+0x94>
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	50 40       	sbci	r21, 0x00	; 0
     d66:	e6 95       	lsr	r30
     d68:	00 1c       	adc	r0, r0
     d6a:	ca f7       	brpl	.-14     	; 0xd5e <__divsf3_pse+0x2c>
     d6c:	2b d0       	rcall	.+86     	; 0xdc4 <__divsf3_pse+0x92>
     d6e:	fe 2f       	mov	r31, r30
     d70:	29 d0       	rcall	.+82     	; 0xdc4 <__divsf3_pse+0x92>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	bb 1f       	adc	r27, r27
     d7a:	26 17       	cp	r18, r22
     d7c:	37 07       	cpc	r19, r23
     d7e:	48 07       	cpc	r20, r24
     d80:	ab 07       	cpc	r26, r27
     d82:	b0 e8       	ldi	r27, 0x80	; 128
     d84:	09 f0       	breq	.+2      	; 0xd88 <__divsf3_pse+0x56>
     d86:	bb 0b       	sbc	r27, r27
     d88:	80 2d       	mov	r24, r0
     d8a:	bf 01       	movw	r22, r30
     d8c:	ff 27       	eor	r31, r31
     d8e:	93 58       	subi	r25, 0x83	; 131
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	3a f0       	brmi	.+14     	; 0xda2 <__divsf3_pse+0x70>
     d94:	9e 3f       	cpi	r25, 0xFE	; 254
     d96:	51 05       	cpc	r21, r1
     d98:	78 f0       	brcs	.+30     	; 0xdb8 <__divsf3_pse+0x86>
     d9a:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_inf>
     d9e:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_szero>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	e4 f3       	brlt	.-8      	; 0xd9e <__divsf3_pse+0x6c>
     da6:	98 3e       	cpi	r25, 0xE8	; 232
     da8:	d4 f3       	brlt	.-12     	; 0xd9e <__divsf3_pse+0x6c>
     daa:	86 95       	lsr	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__divsf3_pse+0x78>
     db8:	88 0f       	add	r24, r24
     dba:	91 1d       	adc	r25, r1
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret
     dc4:	e1 e0       	ldi	r30, 0x01	; 1
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	ba 07       	cpc	r27, r26
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__divsf3_pse+0xae>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba 0b       	sbc	r27, r26
     de0:	ee 1f       	adc	r30, r30
     de2:	88 f7       	brcc	.-30     	; 0xdc6 <__divsf3_pse+0x94>
     de4:	e0 95       	com	r30
     de6:	08 95       	ret

00000de8 <__fixsfsi>:
     de8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fixunssfsi>
     dec:	68 94       	set
     dee:	b1 11       	cpse	r27, r1
     df0:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_szero>
     df4:	08 95       	ret

00000df6 <__fixunssfsi>:
     df6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_splitA>
     dfa:	88 f0       	brcs	.+34     	; 0xe1e <__fixunssfsi+0x28>
     dfc:	9f 57       	subi	r25, 0x7F	; 127
     dfe:	98 f0       	brcs	.+38     	; 0xe26 <__fixunssfsi+0x30>
     e00:	b9 2f       	mov	r27, r25
     e02:	99 27       	eor	r25, r25
     e04:	b7 51       	subi	r27, 0x17	; 23
     e06:	b0 f0       	brcs	.+44     	; 0xe34 <__fixunssfsi+0x3e>
     e08:	e1 f0       	breq	.+56     	; 0xe42 <__fixunssfsi+0x4c>
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	1a f0       	brmi	.+6      	; 0xe1a <__fixunssfsi+0x24>
     e14:	ba 95       	dec	r27
     e16:	c9 f7       	brne	.-14     	; 0xe0a <__fixunssfsi+0x14>
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <__fixunssfsi+0x4c>
     e1a:	b1 30       	cpi	r27, 0x01	; 1
     e1c:	91 f0       	breq	.+36     	; 0xe42 <__fixunssfsi+0x4c>
     e1e:	0e 94 fc 07 	call	0xff8	; 0xff8 <__fp_zero>
     e22:	b1 e0       	ldi	r27, 0x01	; 1
     e24:	08 95       	ret
     e26:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__fp_zero>
     e2a:	67 2f       	mov	r22, r23
     e2c:	78 2f       	mov	r23, r24
     e2e:	88 27       	eor	r24, r24
     e30:	b8 5f       	subi	r27, 0xF8	; 248
     e32:	39 f0       	breq	.+14     	; 0xe42 <__fixunssfsi+0x4c>
     e34:	b9 3f       	cpi	r27, 0xF9	; 249
     e36:	cc f3       	brlt	.-14     	; 0xe2a <__fixunssfsi+0x34>
     e38:	86 95       	lsr	r24
     e3a:	77 95       	ror	r23
     e3c:	67 95       	ror	r22
     e3e:	b3 95       	inc	r27
     e40:	d9 f7       	brne	.-10     	; 0xe38 <__fixunssfsi+0x42>
     e42:	3e f4       	brtc	.+14     	; 0xe52 <__fixunssfsi+0x5c>
     e44:	90 95       	com	r25
     e46:	80 95       	com	r24
     e48:	70 95       	com	r23
     e4a:	61 95       	neg	r22
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	8f 4f       	sbci	r24, 0xFF	; 255
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	08 95       	ret

00000e54 <__floatunsisf>:
     e54:	e8 94       	clt
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <__floatsisf+0x12>

00000e58 <__floatsisf>:
     e58:	97 fb       	bst	r25, 7
     e5a:	3e f4       	brtc	.+14     	; 0xe6a <__floatsisf+0x12>
     e5c:	90 95       	com	r25
     e5e:	80 95       	com	r24
     e60:	70 95       	com	r23
     e62:	61 95       	neg	r22
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	99 23       	and	r25, r25
     e6c:	a9 f0       	breq	.+42     	; 0xe98 <__floatsisf+0x40>
     e6e:	f9 2f       	mov	r31, r25
     e70:	96 e9       	ldi	r25, 0x96	; 150
     e72:	bb 27       	eor	r27, r27
     e74:	93 95       	inc	r25
     e76:	f6 95       	lsr	r31
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b7 95       	ror	r27
     e80:	f1 11       	cpse	r31, r1
     e82:	f8 cf       	rjmp	.-16     	; 0xe74 <__floatsisf+0x1c>
     e84:	fa f4       	brpl	.+62     	; 0xec4 <__floatsisf+0x6c>
     e86:	bb 0f       	add	r27, r27
     e88:	11 f4       	brne	.+4      	; 0xe8e <__floatsisf+0x36>
     e8a:	60 ff       	sbrs	r22, 0
     e8c:	1b c0       	rjmp	.+54     	; 0xec4 <__floatsisf+0x6c>
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <__floatsisf+0x6c>
     e98:	88 23       	and	r24, r24
     e9a:	11 f0       	breq	.+4      	; 0xea0 <__floatsisf+0x48>
     e9c:	96 e9       	ldi	r25, 0x96	; 150
     e9e:	11 c0       	rjmp	.+34     	; 0xec2 <__floatsisf+0x6a>
     ea0:	77 23       	and	r23, r23
     ea2:	21 f0       	breq	.+8      	; 0xeac <__floatsisf+0x54>
     ea4:	9e e8       	ldi	r25, 0x8E	; 142
     ea6:	87 2f       	mov	r24, r23
     ea8:	76 2f       	mov	r23, r22
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <__floatsisf+0x5e>
     eac:	66 23       	and	r22, r22
     eae:	71 f0       	breq	.+28     	; 0xecc <__floatsisf+0x74>
     eb0:	96 e8       	ldi	r25, 0x86	; 134
     eb2:	86 2f       	mov	r24, r22
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	2a f0       	brmi	.+10     	; 0xec4 <__floatsisf+0x6c>
     eba:	9a 95       	dec	r25
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	da f7       	brpl	.-10     	; 0xeba <__floatsisf+0x62>
     ec4:	88 0f       	add	r24, r24
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	97 f9       	bld	r25, 7
     ecc:	08 95       	ret

00000ece <__fp_cmp>:
     ece:	99 0f       	add	r25, r25
     ed0:	00 08       	sbc	r0, r0
     ed2:	55 0f       	add	r21, r21
     ed4:	aa 0b       	sbc	r26, r26
     ed6:	e0 e8       	ldi	r30, 0x80	; 128
     ed8:	fe ef       	ldi	r31, 0xFE	; 254
     eda:	16 16       	cp	r1, r22
     edc:	17 06       	cpc	r1, r23
     ede:	e8 07       	cpc	r30, r24
     ee0:	f9 07       	cpc	r31, r25
     ee2:	c0 f0       	brcs	.+48     	; 0xf14 <__fp_cmp+0x46>
     ee4:	12 16       	cp	r1, r18
     ee6:	13 06       	cpc	r1, r19
     ee8:	e4 07       	cpc	r30, r20
     eea:	f5 07       	cpc	r31, r21
     eec:	98 f0       	brcs	.+38     	; 0xf14 <__fp_cmp+0x46>
     eee:	62 1b       	sub	r22, r18
     ef0:	73 0b       	sbc	r23, r19
     ef2:	84 0b       	sbc	r24, r20
     ef4:	95 0b       	sbc	r25, r21
     ef6:	39 f4       	brne	.+14     	; 0xf06 <__fp_cmp+0x38>
     ef8:	0a 26       	eor	r0, r26
     efa:	61 f0       	breq	.+24     	; 0xf14 <__fp_cmp+0x46>
     efc:	23 2b       	or	r18, r19
     efe:	24 2b       	or	r18, r20
     f00:	25 2b       	or	r18, r21
     f02:	21 f4       	brne	.+8      	; 0xf0c <__fp_cmp+0x3e>
     f04:	08 95       	ret
     f06:	0a 26       	eor	r0, r26
     f08:	09 f4       	brne	.+2      	; 0xf0c <__fp_cmp+0x3e>
     f0a:	a1 40       	sbci	r26, 0x01	; 1
     f0c:	a6 95       	lsr	r26
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	81 1d       	adc	r24, r1
     f12:	81 1d       	adc	r24, r1
     f14:	08 95       	ret

00000f16 <__fp_inf>:
     f16:	97 f9       	bld	r25, 7
     f18:	9f 67       	ori	r25, 0x7F	; 127
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	08 95       	ret

00000f22 <__fp_nan>:
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	80 ec       	ldi	r24, 0xC0	; 192
     f26:	08 95       	ret

00000f28 <__fp_powser>:
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	1f 93       	push	r17
     f2e:	0f 93       	push	r16
     f30:	ff 92       	push	r15
     f32:	ef 92       	push	r14
     f34:	df 92       	push	r13
     f36:	7b 01       	movw	r14, r22
     f38:	8c 01       	movw	r16, r24
     f3a:	68 94       	set
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <__fp_powser+0x22>
     f3e:	da 2e       	mov	r13, r26
     f40:	ef 01       	movw	r28, r30
     f42:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3x>
     f46:	fe 01       	movw	r30, r28
     f48:	e8 94       	clt
     f4a:	a5 91       	lpm	r26, Z+
     f4c:	25 91       	lpm	r18, Z+
     f4e:	35 91       	lpm	r19, Z+
     f50:	45 91       	lpm	r20, Z+
     f52:	55 91       	lpm	r21, Z+
     f54:	a6 f3       	brts	.-24     	; 0xf3e <__fp_powser+0x16>
     f56:	ef 01       	movw	r28, r30
     f58:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__addsf3x>
     f5c:	fe 01       	movw	r30, r28
     f5e:	97 01       	movw	r18, r14
     f60:	a8 01       	movw	r20, r16
     f62:	da 94       	dec	r13
     f64:	69 f7       	brne	.-38     	; 0xf40 <__fp_powser+0x18>
     f66:	df 90       	pop	r13
     f68:	ef 90       	pop	r14
     f6a:	ff 90       	pop	r15
     f6c:	0f 91       	pop	r16
     f6e:	1f 91       	pop	r17
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <__fp_pscA>:
     f76:	00 24       	eor	r0, r0
     f78:	0a 94       	dec	r0
     f7a:	16 16       	cp	r1, r22
     f7c:	17 06       	cpc	r1, r23
     f7e:	18 06       	cpc	r1, r24
     f80:	09 06       	cpc	r0, r25
     f82:	08 95       	ret

00000f84 <__fp_pscB>:
     f84:	00 24       	eor	r0, r0
     f86:	0a 94       	dec	r0
     f88:	12 16       	cp	r1, r18
     f8a:	13 06       	cpc	r1, r19
     f8c:	14 06       	cpc	r1, r20
     f8e:	05 06       	cpc	r0, r21
     f90:	08 95       	ret

00000f92 <__fp_round>:
     f92:	09 2e       	mov	r0, r25
     f94:	03 94       	inc	r0
     f96:	00 0c       	add	r0, r0
     f98:	11 f4       	brne	.+4      	; 0xf9e <__fp_round+0xc>
     f9a:	88 23       	and	r24, r24
     f9c:	52 f0       	brmi	.+20     	; 0xfb2 <__fp_round+0x20>
     f9e:	bb 0f       	add	r27, r27
     fa0:	40 f4       	brcc	.+16     	; 0xfb2 <__fp_round+0x20>
     fa2:	bf 2b       	or	r27, r31
     fa4:	11 f4       	brne	.+4      	; 0xfaa <__fp_round+0x18>
     fa6:	60 ff       	sbrs	r22, 0
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <__fp_round+0x20>
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	08 95       	ret

00000fb4 <__fp_split3>:
     fb4:	57 fd       	sbrc	r21, 7
     fb6:	90 58       	subi	r25, 0x80	; 128
     fb8:	44 0f       	add	r20, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	59 f0       	breq	.+22     	; 0xfd4 <__fp_splitA+0x10>
     fbe:	5f 3f       	cpi	r21, 0xFF	; 255
     fc0:	71 f0       	breq	.+28     	; 0xfde <__fp_splitA+0x1a>
     fc2:	47 95       	ror	r20

00000fc4 <__fp_splitA>:
     fc4:	88 0f       	add	r24, r24
     fc6:	97 fb       	bst	r25, 7
     fc8:	99 1f       	adc	r25, r25
     fca:	61 f0       	breq	.+24     	; 0xfe4 <__fp_splitA+0x20>
     fcc:	9f 3f       	cpi	r25, 0xFF	; 255
     fce:	79 f0       	breq	.+30     	; 0xfee <__fp_splitA+0x2a>
     fd0:	87 95       	ror	r24
     fd2:	08 95       	ret
     fd4:	12 16       	cp	r1, r18
     fd6:	13 06       	cpc	r1, r19
     fd8:	14 06       	cpc	r1, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	f2 cf       	rjmp	.-28     	; 0xfc2 <__fp_split3+0xe>
     fde:	46 95       	lsr	r20
     fe0:	f1 df       	rcall	.-30     	; 0xfc4 <__fp_splitA>
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <__fp_splitA+0x30>
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	18 06       	cpc	r1, r24
     fea:	99 1f       	adc	r25, r25
     fec:	f1 cf       	rjmp	.-30     	; 0xfd0 <__fp_splitA+0xc>
     fee:	86 95       	lsr	r24
     ff0:	71 05       	cpc	r23, r1
     ff2:	61 05       	cpc	r22, r1
     ff4:	08 94       	sec
     ff6:	08 95       	ret

00000ff8 <__fp_zero>:
     ff8:	e8 94       	clt

00000ffa <__fp_szero>:
     ffa:	bb 27       	eor	r27, r27
     ffc:	66 27       	eor	r22, r22
     ffe:	77 27       	eor	r23, r23
    1000:	cb 01       	movw	r24, r22
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret

00001006 <inverse>:
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e8       	ldi	r24, 0x80	; 128
    1010:	9f e3       	ldi	r25, 0x3F	; 63
    1012:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__divsf3>

00001016 <__mulsf3>:
    1016:	0e 94 1e 08 	call	0x103c	; 0x103c <__mulsf3x>
    101a:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__fp_round>
    101e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_pscA>
    1022:	38 f0       	brcs	.+14     	; 0x1032 <__mulsf3+0x1c>
    1024:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscB>
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__mulsf3+0x1c>
    102a:	95 23       	and	r25, r21
    102c:	11 f0       	breq	.+4      	; 0x1032 <__mulsf3+0x1c>
    102e:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_inf>
    1032:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_nan>
    1036:	11 24       	eor	r1, r1
    1038:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_szero>

0000103c <__mulsf3x>:
    103c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_split3>
    1040:	70 f3       	brcs	.-36     	; 0x101e <__mulsf3+0x8>

00001042 <__mulsf3_pse>:
    1042:	95 9f       	mul	r25, r21
    1044:	c1 f3       	breq	.-16     	; 0x1036 <__mulsf3+0x20>
    1046:	95 0f       	add	r25, r21
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	55 1f       	adc	r21, r21
    104c:	62 9f       	mul	r22, r18
    104e:	f0 01       	movw	r30, r0
    1050:	72 9f       	mul	r23, r18
    1052:	bb 27       	eor	r27, r27
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	63 9f       	mul	r22, r19
    105a:	aa 27       	eor	r26, r26
    105c:	f0 0d       	add	r31, r0
    105e:	b1 1d       	adc	r27, r1
    1060:	aa 1f       	adc	r26, r26
    1062:	64 9f       	mul	r22, r20
    1064:	66 27       	eor	r22, r22
    1066:	b0 0d       	add	r27, r0
    1068:	a1 1d       	adc	r26, r1
    106a:	66 1f       	adc	r22, r22
    106c:	82 9f       	mul	r24, r18
    106e:	22 27       	eor	r18, r18
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	73 9f       	mul	r23, r19
    1078:	b0 0d       	add	r27, r0
    107a:	a1 1d       	adc	r26, r1
    107c:	62 1f       	adc	r22, r18
    107e:	83 9f       	mul	r24, r19
    1080:	a0 0d       	add	r26, r0
    1082:	61 1d       	adc	r22, r1
    1084:	22 1f       	adc	r18, r18
    1086:	74 9f       	mul	r23, r20
    1088:	33 27       	eor	r19, r19
    108a:	a0 0d       	add	r26, r0
    108c:	61 1d       	adc	r22, r1
    108e:	23 1f       	adc	r18, r19
    1090:	84 9f       	mul	r24, r20
    1092:	60 0d       	add	r22, r0
    1094:	21 1d       	adc	r18, r1
    1096:	82 2f       	mov	r24, r18
    1098:	76 2f       	mov	r23, r22
    109a:	6a 2f       	mov	r22, r26
    109c:	11 24       	eor	r1, r1
    109e:	9f 57       	subi	r25, 0x7F	; 127
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	9a f0       	brmi	.+38     	; 0x10ca <__mulsf3_pse+0x88>
    10a4:	f1 f0       	breq	.+60     	; 0x10e2 <__mulsf3_pse+0xa0>
    10a6:	88 23       	and	r24, r24
    10a8:	4a f0       	brmi	.+18     	; 0x10bc <__mulsf3_pse+0x7a>
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	bb 1f       	adc	r27, r27
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	91 50       	subi	r25, 0x01	; 1
    10b8:	50 40       	sbci	r21, 0x00	; 0
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__mulsf3_pse+0x64>
    10bc:	9e 3f       	cpi	r25, 0xFE	; 254
    10be:	51 05       	cpc	r21, r1
    10c0:	80 f0       	brcs	.+32     	; 0x10e2 <__mulsf3_pse+0xa0>
    10c2:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__fp_inf>
    10c6:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_szero>
    10ca:	5f 3f       	cpi	r21, 0xFF	; 255
    10cc:	e4 f3       	brlt	.-8      	; 0x10c6 <__mulsf3_pse+0x84>
    10ce:	98 3e       	cpi	r25, 0xE8	; 232
    10d0:	d4 f3       	brlt	.-12     	; 0x10c6 <__mulsf3_pse+0x84>
    10d2:	86 95       	lsr	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b7 95       	ror	r27
    10da:	f7 95       	ror	r31
    10dc:	e7 95       	ror	r30
    10de:	9f 5f       	subi	r25, 0xFF	; 255
    10e0:	c1 f7       	brne	.-16     	; 0x10d2 <__mulsf3_pse+0x90>
    10e2:	fe 2b       	or	r31, r30
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <__mulsf3_pse+0xb6>
    10f2:	16 f4       	brtc	.+4      	; 0x10f8 <__mulsf3_pse+0xb6>
    10f4:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_nan>
    10f8:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__fp_mpack>

000010fc <sqrt>:
    10fc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fp_splitA>
    1100:	b8 f3       	brcs	.-18     	; 0x10f0 <__mulsf3_pse+0xae>
    1102:	99 23       	and	r25, r25
    1104:	c9 f3       	breq	.-14     	; 0x10f8 <__mulsf3_pse+0xb6>
    1106:	b6 f3       	brts	.-20     	; 0x10f4 <__mulsf3_pse+0xb2>
    1108:	9f 57       	subi	r25, 0x7F	; 127
    110a:	55 0b       	sbc	r21, r21
    110c:	87 ff       	sbrs	r24, 7
    110e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__fp_norm2>
    1112:	00 24       	eor	r0, r0
    1114:	a0 e6       	ldi	r26, 0x60	; 96
    1116:	40 ea       	ldi	r20, 0xA0	; 160
    1118:	90 01       	movw	r18, r0
    111a:	80 58       	subi	r24, 0x80	; 128
    111c:	56 95       	lsr	r21
    111e:	97 95       	ror	r25
    1120:	28 f4       	brcc	.+10     	; 0x112c <sqrt+0x30>
    1122:	80 5c       	subi	r24, 0xC0	; 192
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	20 f0       	brcs	.+8      	; 0x1134 <sqrt+0x38>
    112c:	26 17       	cp	r18, r22
    112e:	37 07       	cpc	r19, r23
    1130:	48 07       	cpc	r20, r24
    1132:	30 f4       	brcc	.+12     	; 0x1140 <sqrt+0x44>
    1134:	62 1b       	sub	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	20 29       	or	r18, r0
    113c:	31 29       	or	r19, r1
    113e:	4a 2b       	or	r20, r26
    1140:	a6 95       	lsr	r26
    1142:	17 94       	ror	r1
    1144:	07 94       	ror	r0
    1146:	20 25       	eor	r18, r0
    1148:	31 25       	eor	r19, r1
    114a:	4a 27       	eor	r20, r26
    114c:	58 f7       	brcc	.-42     	; 0x1124 <sqrt+0x28>
    114e:	66 0f       	add	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	88 1f       	adc	r24, r24
    1154:	20 f0       	brcs	.+8      	; 0x115e <sqrt+0x62>
    1156:	26 17       	cp	r18, r22
    1158:	37 07       	cpc	r19, r23
    115a:	48 07       	cpc	r20, r24
    115c:	30 f4       	brcc	.+12     	; 0x116a <sqrt+0x6e>
    115e:	62 0b       	sbc	r22, r18
    1160:	73 0b       	sbc	r23, r19
    1162:	84 0b       	sbc	r24, r20
    1164:	20 0d       	add	r18, r0
    1166:	31 1d       	adc	r19, r1
    1168:	41 1d       	adc	r20, r1
    116a:	a0 95       	com	r26
    116c:	81 f7       	brne	.-32     	; 0x114e <sqrt+0x52>
    116e:	b9 01       	movw	r22, r18
    1170:	84 2f       	mov	r24, r20
    1172:	91 58       	subi	r25, 0x81	; 129
    1174:	88 0f       	add	r24, r24
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	08 95       	ret

0000117c <square>:
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__mulsf3>

00001184 <__fp_mpack>:
    1184:	9f 3f       	cpi	r25, 0xFF	; 255
    1186:	31 f0       	breq	.+12     	; 0x1194 <__fp_mpack_finite+0xc>

00001188 <__fp_mpack_finite>:
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	20 f4       	brcc	.+8      	; 0x1194 <__fp_mpack_finite+0xc>
    118c:	87 95       	ror	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b7 95       	ror	r27
    1194:	88 0f       	add	r24, r24
    1196:	91 1d       	adc	r25, r1
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <__fp_norm2>:
    11a0:	91 50       	subi	r25, 0x01	; 1
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	d2 f7       	brpl	.-12     	; 0x11a0 <__fp_norm2>
    11ac:	08 95       	ret

000011ae <__umulhisi3>:
    11ae:	a2 9f       	mul	r26, r18
    11b0:	b0 01       	movw	r22, r0
    11b2:	b3 9f       	mul	r27, r19
    11b4:	c0 01       	movw	r24, r0
    11b6:	a3 9f       	mul	r26, r19
    11b8:	70 0d       	add	r23, r0
    11ba:	81 1d       	adc	r24, r1
    11bc:	11 24       	eor	r1, r1
    11be:	91 1d       	adc	r25, r1
    11c0:	b2 9f       	mul	r27, r18
    11c2:	70 0d       	add	r23, r0
    11c4:	81 1d       	adc	r24, r1
    11c6:	11 24       	eor	r1, r1
    11c8:	91 1d       	adc	r25, r1
    11ca:	08 95       	ret

000011cc <__muluhisi3>:
    11cc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__umulhisi3>
    11d0:	a5 9f       	mul	r26, r21
    11d2:	90 0d       	add	r25, r0
    11d4:	b4 9f       	mul	r27, r20
    11d6:	90 0d       	add	r25, r0
    11d8:	a4 9f       	mul	r26, r20
    11da:	80 0d       	add	r24, r0
    11dc:	91 1d       	adc	r25, r1
    11de:	11 24       	eor	r1, r1
    11e0:	08 95       	ret

000011e2 <__itoa_ncheck>:
    11e2:	bb 27       	eor	r27, r27
    11e4:	4a 30       	cpi	r20, 0x0A	; 10
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <__itoa_ncheck+0x12>
    11e8:	99 23       	and	r25, r25
    11ea:	22 f4       	brpl	.+8      	; 0x11f4 <__itoa_ncheck+0x12>
    11ec:	bd e2       	ldi	r27, 0x2D	; 45
    11ee:	90 95       	com	r25
    11f0:	81 95       	neg	r24
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__utoa_common>

000011f8 <__utoa_ncheck>:
    11f8:	bb 27       	eor	r27, r27

000011fa <__utoa_common>:
    11fa:	fb 01       	movw	r30, r22
    11fc:	55 27       	eor	r21, r21
    11fe:	aa 27       	eor	r26, r26
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	aa 1f       	adc	r26, r26
    1206:	a4 17       	cp	r26, r20
    1208:	10 f0       	brcs	.+4      	; 0x120e <__utoa_common+0x14>
    120a:	a4 1b       	sub	r26, r20
    120c:	83 95       	inc	r24
    120e:	50 51       	subi	r21, 0x10	; 16
    1210:	b9 f7       	brne	.-18     	; 0x1200 <__utoa_common+0x6>
    1212:	a0 5d       	subi	r26, 0xD0	; 208
    1214:	aa 33       	cpi	r26, 0x3A	; 58
    1216:	08 f0       	brcs	.+2      	; 0x121a <__utoa_common+0x20>
    1218:	a9 5d       	subi	r26, 0xD9	; 217
    121a:	a1 93       	st	Z+, r26
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	79 f7       	brne	.-34     	; 0x11fe <__utoa_common+0x4>
    1220:	b1 11       	cpse	r27, r1
    1222:	b1 93       	st	Z+, r27
    1224:	11 92       	st	Z+, r1
    1226:	cb 01       	movw	r24, r22
    1228:	0c 94 16 09 	jmp	0x122c	; 0x122c <strrev>

0000122c <strrev>:
    122c:	dc 01       	movw	r26, r24
    122e:	fc 01       	movw	r30, r24
    1230:	67 2f       	mov	r22, r23
    1232:	71 91       	ld	r23, Z+
    1234:	77 23       	and	r23, r23
    1236:	e1 f7       	brne	.-8      	; 0x1230 <strrev+0x4>
    1238:	32 97       	sbiw	r30, 0x02	; 2
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <strrev+0x18>
    123c:	7c 91       	ld	r23, X
    123e:	6d 93       	st	X+, r22
    1240:	70 83       	st	Z, r23
    1242:	62 91       	ld	r22, -Z
    1244:	ae 17       	cp	r26, r30
    1246:	bf 07       	cpc	r27, r31
    1248:	c8 f3       	brcs	.-14     	; 0x123c <strrev+0x10>
    124a:	08 95       	ret

0000124c <_exit>:
    124c:	f8 94       	cli

0000124e <__stop_program>:
    124e:	ff cf       	rjmp	.-2      	; 0x124e <__stop_program>
